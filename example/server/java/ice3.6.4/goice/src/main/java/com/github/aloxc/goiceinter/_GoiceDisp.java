// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `goice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.github.aloxc.goiceinter;

public abstract class _GoiceDisp extends Ice.ObjectImpl implements Goice
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::goiceinter::Goice"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String execute(Request request)
    {
        return execute(request, null);
    }

    public final boolean getBool()
    {
        return getBool(null);
    }

    public final boolean[] getBoolArr()
    {
        return getBoolArr(null);
    }

    public final boolean[] getBoolArrFrom(boolean[] arr)
    {
        return getBoolArrFrom(arr, null);
    }

    public final boolean getBoolFrom(boolean value)
    {
        return getBoolFrom(value, null);
    }

    public final byte getByte()
    {
        return getByte(null);
    }

    public final byte[] getByteArr()
    {
        return getByteArr(null);
    }

    public final byte[] getByteArrFrom(byte[] arr)
    {
        return getByteArrFrom(arr, null);
    }

    public final byte getByteFrom(byte value)
    {
        return getByteFrom(value, null);
    }

    public final double getDouble()
    {
        return getDouble(null);
    }

    public final double[] getDoubleArr()
    {
        return getDoubleArr(null);
    }

    public final double[] getDoubleArrFrom(double[] arr)
    {
        return getDoubleArrFrom(arr, null);
    }

    public final double getDoubleFrom(double value)
    {
        return getDoubleFrom(value, null);
    }

    public final float getFloat()
    {
        return getFloat(null);
    }

    public final float[] getFloatArr()
    {
        return getFloatArr(null);
    }

    public final float[] getFloatArrFrom(float[] arr)
    {
        return getFloatArrFrom(arr, null);
    }

    public final float getFloatFrom(float value)
    {
        return getFloatFrom(value, null);
    }

    public final int getInt()
    {
        return getInt(null);
    }

    public final int[] getIntArr()
    {
        return getIntArr(null);
    }

    public final int[] getIntArrFrom(int[] arr)
    {
        return getIntArrFrom(arr, null);
    }

    public final int getIntFrom(int value)
    {
        return getIntFrom(value, null);
    }

    public final long getLong()
    {
        return getLong(null);
    }

    public final long[] getLongArr()
    {
        return getLongArr(null);
    }

    public final long[] getLongArrFrom(long[] arr)
    {
        return getLongArrFrom(arr, null);
    }

    public final long getLongFrom(long value)
    {
        return getLongFrom(value, null);
    }

    public final short getShort()
    {
        return getShort(null);
    }

    public final short[] getShortArr()
    {
        return getShortArr(null);
    }

    public final short[] getShortArrFrom(short[] arr)
    {
        return getShortArrFrom(arr, null);
    }

    public final short getShortFrom(short value)
    {
        return getShortFrom(value, null);
    }

    public final String getString()
    {
        return getString(null);
    }

    public final String[] getStringArr()
    {
        return getStringArr(null);
    }

    public final String[] getStringArrFrom(String[] arr)
    {
        return getStringArrFrom(arr, null);
    }

    public final String getStringFrom(String value)
    {
        return getStringFrom(value, null);
    }

    public final String non()
    {
        return non(null);
    }

    public final String two(String from, String to)
    {
        return two(from, to, null);
    }

    public final void vvoid()
    {
        vvoid(null);
    }

    public final void vvoidTo(String value)
    {
        vvoidTo(value, null);
    }

    public static Ice.DispatchStatus ___non(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.non(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getString(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getString(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getStringFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String value;
        value = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.getStringFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getStringArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String[] __ret = __obj.getStringArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        StrArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getStringArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String[] arr;
        arr = StrArrHelper.read(__is);
        __inS.endReadParams();
        String[] __ret = __obj.getStringArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        StrArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___two(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String from;
        String to;
        from = __is.readString();
        to = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.two(from, to, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___vvoid(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.vvoid(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___vvoidTo(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String value;
        value = __is.readString();
        __inS.endReadParams();
        __obj.vvoidTo(value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getByte(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        byte __ret = __obj.getByte(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeByte(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getByteFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte value;
        value = __is.readByte();
        __inS.endReadParams();
        byte __ret = __obj.getByteFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeByte(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getByteArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        byte[] __ret = __obj.getByteArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ByteArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getByteArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte[] arr;
        arr = ByteArrHelper.read(__is);
        __inS.endReadParams();
        byte[] __ret = __obj.getByteArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ByteArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getBool(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        boolean __ret = __obj.getBool(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getBoolFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean value;
        value = __is.readBool();
        __inS.endReadParams();
        boolean __ret = __obj.getBoolFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getBoolArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        boolean[] __ret = __obj.getBoolArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        BoolArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getBoolArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean[] arr;
        arr = BoolArrHelper.read(__is);
        __inS.endReadParams();
        boolean[] __ret = __obj.getBoolArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        BoolArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getShort(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        short __ret = __obj.getShort(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeShort(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getShortFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        short value;
        value = __is.readShort();
        __inS.endReadParams();
        short __ret = __obj.getShortFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeShort(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getShortArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        short[] __ret = __obj.getShortArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ShortArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getShortArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        short[] arr;
        arr = ShortArrHelper.read(__is);
        __inS.endReadParams();
        short[] __ret = __obj.getShortArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ShortArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getInt(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        int __ret = __obj.getInt(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getIntFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int value;
        value = __is.readInt();
        __inS.endReadParams();
        int __ret = __obj.getIntFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getIntArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        int[] __ret = __obj.getIntArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        IntArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getIntArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int[] arr;
        arr = IntArrHelper.read(__is);
        __inS.endReadParams();
        int[] __ret = __obj.getIntArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        IntArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getLong(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        long __ret = __obj.getLong(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeLong(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getLongFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        long value;
        value = __is.readLong();
        __inS.endReadParams();
        long __ret = __obj.getLongFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeLong(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getLongArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        long[] __ret = __obj.getLongArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        LongArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getLongArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        long[] arr;
        arr = LongArrHelper.read(__is);
        __inS.endReadParams();
        long[] __ret = __obj.getLongArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        LongArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getFloat(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        float __ret = __obj.getFloat(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeFloat(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getFloatFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        float value;
        value = __is.readFloat();
        __inS.endReadParams();
        float __ret = __obj.getFloatFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeFloat(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getFloatArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        float[] __ret = __obj.getFloatArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FloatArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getFloatArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        float[] arr;
        arr = FloatArrHelper.read(__is);
        __inS.endReadParams();
        float[] __ret = __obj.getFloatArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FloatArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getDouble(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        double __ret = __obj.getDouble(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getDoubleFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        double value;
        value = __is.readDouble();
        __inS.endReadParams();
        double __ret = __obj.getDoubleFrom(value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getDoubleArr(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        double[] __ret = __obj.getDoubleArr(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        DoubleArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getDoubleArrFrom(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        double[] arr;
        arr = DoubleArrHelper.read(__is);
        __inS.endReadParams();
        double[] __ret = __obj.getDoubleArrFrom(arr, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        DoubleArrHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___execute(Goice __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Request request = null;
        request = Request.__read(__is, request);
        __inS.endReadParams();
        String __ret = __obj.execute(request, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "execute",
        "getBool",
        "getBoolArr",
        "getBoolArrFrom",
        "getBoolFrom",
        "getByte",
        "getByteArr",
        "getByteArrFrom",
        "getByteFrom",
        "getDouble",
        "getDoubleArr",
        "getDoubleArrFrom",
        "getDoubleFrom",
        "getFloat",
        "getFloatArr",
        "getFloatArrFrom",
        "getFloatFrom",
        "getInt",
        "getIntArr",
        "getIntArrFrom",
        "getIntFrom",
        "getLong",
        "getLongArr",
        "getLongArrFrom",
        "getLongFrom",
        "getShort",
        "getShortArr",
        "getShortArrFrom",
        "getShortFrom",
        "getString",
        "getStringArr",
        "getStringArrFrom",
        "getStringFrom",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "non",
        "two",
        "vvoid",
        "vvoidTo"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___execute(this, in, __current);
            }
            case 1:
            {
                return ___getBool(this, in, __current);
            }
            case 2:
            {
                return ___getBoolArr(this, in, __current);
            }
            case 3:
            {
                return ___getBoolArrFrom(this, in, __current);
            }
            case 4:
            {
                return ___getBoolFrom(this, in, __current);
            }
            case 5:
            {
                return ___getByte(this, in, __current);
            }
            case 6:
            {
                return ___getByteArr(this, in, __current);
            }
            case 7:
            {
                return ___getByteArrFrom(this, in, __current);
            }
            case 8:
            {
                return ___getByteFrom(this, in, __current);
            }
            case 9:
            {
                return ___getDouble(this, in, __current);
            }
            case 10:
            {
                return ___getDoubleArr(this, in, __current);
            }
            case 11:
            {
                return ___getDoubleArrFrom(this, in, __current);
            }
            case 12:
            {
                return ___getDoubleFrom(this, in, __current);
            }
            case 13:
            {
                return ___getFloat(this, in, __current);
            }
            case 14:
            {
                return ___getFloatArr(this, in, __current);
            }
            case 15:
            {
                return ___getFloatArrFrom(this, in, __current);
            }
            case 16:
            {
                return ___getFloatFrom(this, in, __current);
            }
            case 17:
            {
                return ___getInt(this, in, __current);
            }
            case 18:
            {
                return ___getIntArr(this, in, __current);
            }
            case 19:
            {
                return ___getIntArrFrom(this, in, __current);
            }
            case 20:
            {
                return ___getIntFrom(this, in, __current);
            }
            case 21:
            {
                return ___getLong(this, in, __current);
            }
            case 22:
            {
                return ___getLongArr(this, in, __current);
            }
            case 23:
            {
                return ___getLongArrFrom(this, in, __current);
            }
            case 24:
            {
                return ___getLongFrom(this, in, __current);
            }
            case 25:
            {
                return ___getShort(this, in, __current);
            }
            case 26:
            {
                return ___getShortArr(this, in, __current);
            }
            case 27:
            {
                return ___getShortArrFrom(this, in, __current);
            }
            case 28:
            {
                return ___getShortFrom(this, in, __current);
            }
            case 29:
            {
                return ___getString(this, in, __current);
            }
            case 30:
            {
                return ___getStringArr(this, in, __current);
            }
            case 31:
            {
                return ___getStringArrFrom(this, in, __current);
            }
            case 32:
            {
                return ___getStringFrom(this, in, __current);
            }
            case 33:
            {
                return ___ice_id(this, in, __current);
            }
            case 34:
            {
                return ___ice_ids(this, in, __current);
            }
            case 35:
            {
                return ___ice_isA(this, in, __current);
            }
            case 36:
            {
                return ___ice_ping(this, in, __current);
            }
            case 37:
            {
                return ___non(this, in, __current);
            }
            case 38:
            {
                return ___two(this, in, __current);
            }
            case 39:
            {
                return ___vvoid(this, in, __current);
            }
            case 40:
            {
                return ___vvoidTo(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}

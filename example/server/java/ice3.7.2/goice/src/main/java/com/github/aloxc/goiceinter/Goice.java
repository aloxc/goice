//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Goice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.github.aloxc.goiceinter;

public interface Goice extends com.zeroc.Ice.Object
{
    String non(com.zeroc.Ice.Current current);

    String getString(com.zeroc.Ice.Current current);

    String getStringFrom(String value, com.zeroc.Ice.Current current);

    String[] getStringArr(com.zeroc.Ice.Current current);

    String[] getStringArrFrom(String[] arr, com.zeroc.Ice.Current current);

    String two(String from, String to, com.zeroc.Ice.Current current);

    void vvoid(com.zeroc.Ice.Current current);

    void vvoidTo(String value, com.zeroc.Ice.Current current);

    byte getByte(com.zeroc.Ice.Current current);

    byte getByteFrom(byte value, com.zeroc.Ice.Current current);

    byte[] getByteArr(com.zeroc.Ice.Current current);

    byte[] getByteArrFrom(byte[] arr, com.zeroc.Ice.Current current);

    boolean getBool(com.zeroc.Ice.Current current);

    boolean getBoolFrom(boolean value, com.zeroc.Ice.Current current);

    boolean[] getBoolArr(com.zeroc.Ice.Current current);

    boolean[] getBoolArrFrom(boolean[] arr, com.zeroc.Ice.Current current);

    short getShort(com.zeroc.Ice.Current current);

    short getShortFrom(short value, com.zeroc.Ice.Current current);

    short[] getShortArr(com.zeroc.Ice.Current current);

    short[] getShortArrFrom(short[] arr, com.zeroc.Ice.Current current);

    int getInt(com.zeroc.Ice.Current current);

    int getIntFrom(int value, com.zeroc.Ice.Current current);

    int[] getIntArr(com.zeroc.Ice.Current current);

    int[] getIntArrFrom(int[] arr, com.zeroc.Ice.Current current);

    long getLong(com.zeroc.Ice.Current current);

    long getLongFrom(long value, com.zeroc.Ice.Current current);

    long[] getLongArr(com.zeroc.Ice.Current current);

    long[] getLongArrFrom(long[] arr, com.zeroc.Ice.Current current);

    float getFloat(com.zeroc.Ice.Current current);

    float getFloatFrom(float value, com.zeroc.Ice.Current current);

    float[] getFloatArr(com.zeroc.Ice.Current current);

    float[] getFloatArrFrom(float[] arr, com.zeroc.Ice.Current current);

    double getDouble(com.zeroc.Ice.Current current);

    double getDoubleFrom(double value, com.zeroc.Ice.Current current);

    double[] getDoubleArr(com.zeroc.Ice.Current current);

    double[] getDoubleArrFrom(double[] arr, com.zeroc.Ice.Current current);

    String execute(Request request, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::goiceinter::Goice"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::goiceinter::Goice";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_non(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String ret = obj.non(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getString(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String ret = obj.getString(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getStringFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_value;
        iceP_value = istr.readString();
        inS.endReadParams();
        String ret = obj.getStringFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getStringArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String[] ret = obj.getStringArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getStringArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_arr;
        iceP_arr = istr.readStringSeq();
        inS.endReadParams();
        String[] ret = obj.getStringArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeStringSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_two(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_from;
        String iceP_to;
        iceP_from = istr.readString();
        iceP_to = istr.readString();
        inS.endReadParams();
        String ret = obj.two(iceP_from, iceP_to, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_vvoid(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.vvoid(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_vvoidTo(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_value;
        iceP_value = istr.readString();
        inS.endReadParams();
        obj.vvoidTo(iceP_value, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getByte(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        byte ret = obj.getByte(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByte(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getByteFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte iceP_value;
        iceP_value = istr.readByte();
        inS.endReadParams();
        byte ret = obj.getByteFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByte(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getByteArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        byte[] ret = obj.getByteArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getByteArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_arr;
        iceP_arr = istr.readByteSeq();
        inS.endReadParams();
        byte[] ret = obj.getByteArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getBool(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.getBool(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getBoolFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean iceP_value;
        iceP_value = istr.readBool();
        inS.endReadParams();
        boolean ret = obj.getBoolFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getBoolArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean[] ret = obj.getBoolArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getBoolArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        boolean[] iceP_arr;
        iceP_arr = istr.readBoolSeq();
        inS.endReadParams();
        boolean[] ret = obj.getBoolArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBoolSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getShort(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        short ret = obj.getShort(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShort(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getShortFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short iceP_value;
        iceP_value = istr.readShort();
        inS.endReadParams();
        short ret = obj.getShortFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShort(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getShortArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        short[] ret = obj.getShortArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShortSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getShortArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short[] iceP_arr;
        iceP_arr = istr.readShortSeq();
        inS.endReadParams();
        short[] ret = obj.getShortArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShortSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getInt(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        int ret = obj.getInt(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getIntFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_value;
        iceP_value = istr.readInt();
        inS.endReadParams();
        int ret = obj.getIntFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getIntArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        int[] ret = obj.getIntArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeIntSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getIntArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int[] iceP_arr;
        iceP_arr = istr.readIntSeq();
        inS.endReadParams();
        int[] ret = obj.getIntArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeIntSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLong(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        long ret = obj.getLong(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLongFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long iceP_value;
        iceP_value = istr.readLong();
        inS.endReadParams();
        long ret = obj.getLongFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLongArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        long[] ret = obj.getLongArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLongSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLongArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long[] iceP_arr;
        iceP_arr = istr.readLongSeq();
        inS.endReadParams();
        long[] ret = obj.getLongArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLongSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFloat(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float ret = obj.getFloat(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFloatFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float iceP_value;
        iceP_value = istr.readFloat();
        inS.endReadParams();
        float ret = obj.getFloatFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloat(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFloatArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        float[] ret = obj.getFloatArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloatSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFloatArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        float[] iceP_arr;
        iceP_arr = istr.readFloatSeq();
        inS.endReadParams();
        float[] ret = obj.getFloatArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeFloatSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDouble(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        double ret = obj.getDouble(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeDouble(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDoubleFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double iceP_value;
        iceP_value = istr.readDouble();
        inS.endReadParams();
        double ret = obj.getDoubleFrom(iceP_value, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeDouble(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDoubleArr(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        double[] ret = obj.getDoubleArr(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeDoubleSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDoubleArrFrom(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double[] iceP_arr;
        iceP_arr = istr.readDoubleSeq();
        inS.endReadParams();
        double[] ret = obj.getDoubleArrFrom(iceP_arr, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeDoubleSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_execute(Goice obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Request iceP_request;
        iceP_request = Request.ice_read(istr);
        inS.endReadParams();
        String ret = obj.execute(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "execute",
        "getBool",
        "getBoolArr",
        "getBoolArrFrom",
        "getBoolFrom",
        "getByte",
        "getByteArr",
        "getByteArrFrom",
        "getByteFrom",
        "getDouble",
        "getDoubleArr",
        "getDoubleArrFrom",
        "getDoubleFrom",
        "getFloat",
        "getFloatArr",
        "getFloatArrFrom",
        "getFloatFrom",
        "getInt",
        "getIntArr",
        "getIntArrFrom",
        "getIntFrom",
        "getLong",
        "getLongArr",
        "getLongArrFrom",
        "getLongFrom",
        "getShort",
        "getShortArr",
        "getShortArrFrom",
        "getShortFrom",
        "getString",
        "getStringArr",
        "getStringArrFrom",
        "getStringFrom",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "non",
        "two",
        "vvoid",
        "vvoidTo"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_execute(this, in, current);
            }
            case 1:
            {
                return _iceD_getBool(this, in, current);
            }
            case 2:
            {
                return _iceD_getBoolArr(this, in, current);
            }
            case 3:
            {
                return _iceD_getBoolArrFrom(this, in, current);
            }
            case 4:
            {
                return _iceD_getBoolFrom(this, in, current);
            }
            case 5:
            {
                return _iceD_getByte(this, in, current);
            }
            case 6:
            {
                return _iceD_getByteArr(this, in, current);
            }
            case 7:
            {
                return _iceD_getByteArrFrom(this, in, current);
            }
            case 8:
            {
                return _iceD_getByteFrom(this, in, current);
            }
            case 9:
            {
                return _iceD_getDouble(this, in, current);
            }
            case 10:
            {
                return _iceD_getDoubleArr(this, in, current);
            }
            case 11:
            {
                return _iceD_getDoubleArrFrom(this, in, current);
            }
            case 12:
            {
                return _iceD_getDoubleFrom(this, in, current);
            }
            case 13:
            {
                return _iceD_getFloat(this, in, current);
            }
            case 14:
            {
                return _iceD_getFloatArr(this, in, current);
            }
            case 15:
            {
                return _iceD_getFloatArrFrom(this, in, current);
            }
            case 16:
            {
                return _iceD_getFloatFrom(this, in, current);
            }
            case 17:
            {
                return _iceD_getInt(this, in, current);
            }
            case 18:
            {
                return _iceD_getIntArr(this, in, current);
            }
            case 19:
            {
                return _iceD_getIntArrFrom(this, in, current);
            }
            case 20:
            {
                return _iceD_getIntFrom(this, in, current);
            }
            case 21:
            {
                return _iceD_getLong(this, in, current);
            }
            case 22:
            {
                return _iceD_getLongArr(this, in, current);
            }
            case 23:
            {
                return _iceD_getLongArrFrom(this, in, current);
            }
            case 24:
            {
                return _iceD_getLongFrom(this, in, current);
            }
            case 25:
            {
                return _iceD_getShort(this, in, current);
            }
            case 26:
            {
                return _iceD_getShortArr(this, in, current);
            }
            case 27:
            {
                return _iceD_getShortArrFrom(this, in, current);
            }
            case 28:
            {
                return _iceD_getShortFrom(this, in, current);
            }
            case 29:
            {
                return _iceD_getString(this, in, current);
            }
            case 30:
            {
                return _iceD_getStringArr(this, in, current);
            }
            case 31:
            {
                return _iceD_getStringArrFrom(this, in, current);
            }
            case 32:
            {
                return _iceD_getStringFrom(this, in, current);
            }
            case 33:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 34:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 35:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 36:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 37:
            {
                return _iceD_non(this, in, current);
            }
            case 38:
            {
                return _iceD_two(this, in, current);
            }
            case 39:
            {
                return _iceD_vvoid(this, in, current);
            }
            case 40:
            {
                return _iceD_vvoidTo(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}

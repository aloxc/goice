//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Goice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.github.aloxc.goiceinter;

public interface GoicePrx extends com.zeroc.Ice.ObjectPrx
{
    default String non()
    {
        return non(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String non(java.util.Map<String, String> context)
    {
        return _iceI_nonAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String> nonAsync()
    {
        return _iceI_nonAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String> nonAsync(java.util.Map<String, String> context)
    {
        return _iceI_nonAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String> _iceI_nonAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "non", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default String getString()
    {
        return getString(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String getString(java.util.Map<String, String> context)
    {
        return _iceI_getStringAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String> getStringAsync()
    {
        return _iceI_getStringAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String> getStringAsync(java.util.Map<String, String> context)
    {
        return _iceI_getStringAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String> _iceI_getStringAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getString", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default String getStringFrom(String value)
    {
        return getStringFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String getStringFrom(String value, java.util.Map<String, String> context)
    {
        return _iceI_getStringFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String> getStringFromAsync(String value)
    {
        return _iceI_getStringFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String> getStringFromAsync(String value, java.util.Map<String, String> context)
    {
        return _iceI_getStringFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String> _iceI_getStringFromAsync(String iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getStringFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_value);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default String[] getStringArr()
    {
        return getStringArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String[] getStringArr(java.util.Map<String, String> context)
    {
        return _iceI_getStringArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String[]> getStringArrAsync()
    {
        return _iceI_getStringArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String[]> getStringArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getStringArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getStringArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getStringArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    default String[] getStringArrFrom(String[] arr)
    {
        return getStringArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String[] getStringArrFrom(String[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getStringArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String[]> getStringArrFromAsync(String[] arr)
    {
        return _iceI_getStringArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String[]> getStringArrFromAsync(String[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getStringArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_getStringArrFromAsync(String[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getStringArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeStringSeq(iceP_arr);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    default String two(String from, String to)
    {
        return two(from, to, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String two(String from, String to, java.util.Map<String, String> context)
    {
        return _iceI_twoAsync(from, to, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String> twoAsync(String from, String to)
    {
        return _iceI_twoAsync(from, to, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String> twoAsync(String from, String to, java.util.Map<String, String> context)
    {
        return _iceI_twoAsync(from, to, context, false);
    }

    /**
     * @hidden
     * @param iceP_from -
     * @param iceP_to -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String> _iceI_twoAsync(String iceP_from, String iceP_to, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "two", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_from);
                     ostr.writeString(iceP_to);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default void vvoid()
    {
        vvoid(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void vvoid(java.util.Map<String, String> context)
    {
        _iceI_vvoidAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> vvoidAsync()
    {
        return _iceI_vvoidAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> vvoidAsync(java.util.Map<String, String> context)
    {
        return _iceI_vvoidAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_vvoidAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "vvoid", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void vvoidTo(String value)
    {
        vvoidTo(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void vvoidTo(String value, java.util.Map<String, String> context)
    {
        _iceI_vvoidToAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> vvoidToAsync(String value)
    {
        return _iceI_vvoidToAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> vvoidToAsync(String value, java.util.Map<String, String> context)
    {
        return _iceI_vvoidToAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_vvoidToAsync(String iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "vvoidTo", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_value);
                 }, null);
        return f;
    }

    default byte getByte()
    {
        return getByte(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte getByte(java.util.Map<String, String> context)
    {
        return _iceI_getByteAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Byte> getByteAsync()
    {
        return _iceI_getByteAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Byte> getByteAsync(java.util.Map<String, String> context)
    {
        return _iceI_getByteAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Byte> _iceI_getByteAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Byte> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getByte", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     byte ret;
                     ret = istr.readByte();
                     return ret;
                 });
        return f;
    }

    default byte getByteFrom(byte value)
    {
        return getByteFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte getByteFrom(byte value, java.util.Map<String, String> context)
    {
        return _iceI_getByteFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Byte> getByteFromAsync(byte value)
    {
        return _iceI_getByteFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Byte> getByteFromAsync(byte value, java.util.Map<String, String> context)
    {
        return _iceI_getByteFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Byte> _iceI_getByteFromAsync(byte iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Byte> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getByteFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByte(iceP_value);
                 }, istr -> {
                     byte ret;
                     ret = istr.readByte();
                     return ret;
                 });
        return f;
    }

    default byte[] getByteArr()
    {
        return getByteArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] getByteArr(java.util.Map<String, String> context)
    {
        return _iceI_getByteArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<byte[]> getByteArrAsync()
    {
        return _iceI_getByteArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> getByteArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getByteArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_getByteArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getByteArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    default byte[] getByteArrFrom(byte[] arr)
    {
        return getByteArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] getByteArrFrom(byte[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getByteArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<byte[]> getByteArrFromAsync(byte[] arr)
    {
        return _iceI_getByteArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> getByteArrFromAsync(byte[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getByteArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_getByteArrFromAsync(byte[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getByteArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_arr);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    default boolean getBool()
    {
        return getBool(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean getBool(java.util.Map<String, String> context)
    {
        return _iceI_getBoolAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Boolean> getBoolAsync()
    {
        return _iceI_getBoolAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Boolean> getBoolAsync(java.util.Map<String, String> context)
    {
        return _iceI_getBoolAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Boolean> _iceI_getBoolAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getBool", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean getBoolFrom(boolean value)
    {
        return getBoolFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean getBoolFrom(boolean value, java.util.Map<String, String> context)
    {
        return _iceI_getBoolFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Boolean> getBoolFromAsync(boolean value)
    {
        return _iceI_getBoolFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Boolean> getBoolFromAsync(boolean value, java.util.Map<String, String> context)
    {
        return _iceI_getBoolFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Boolean> _iceI_getBoolFromAsync(boolean iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getBoolFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBool(iceP_value);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean[] getBoolArr()
    {
        return getBoolArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] getBoolArr(java.util.Map<String, String> context)
    {
        return _iceI_getBoolArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> getBoolArrAsync()
    {
        return _iceI_getBoolArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> getBoolArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getBoolArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_getBoolArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getBoolArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default boolean[] getBoolArrFrom(boolean[] arr)
    {
        return getBoolArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean[] getBoolArrFrom(boolean[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getBoolArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<boolean[]> getBoolArrFromAsync(boolean[] arr)
    {
        return _iceI_getBoolArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<boolean[]> getBoolArrFromAsync(boolean[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getBoolArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<boolean[]> _iceI_getBoolArrFromAsync(boolean[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<boolean[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getBoolArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeBoolSeq(iceP_arr);
                 }, istr -> {
                     boolean[] ret;
                     ret = istr.readBoolSeq();
                     return ret;
                 });
        return f;
    }

    default short getShort()
    {
        return getShort(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default short getShort(java.util.Map<String, String> context)
    {
        return _iceI_getShortAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Short> getShortAsync()
    {
        return _iceI_getShortAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Short> getShortAsync(java.util.Map<String, String> context)
    {
        return _iceI_getShortAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Short> _iceI_getShortAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Short> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getShort", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     short ret;
                     ret = istr.readShort();
                     return ret;
                 });
        return f;
    }

    default short getShortFrom(short value)
    {
        return getShortFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default short getShortFrom(short value, java.util.Map<String, String> context)
    {
        return _iceI_getShortFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Short> getShortFromAsync(short value)
    {
        return _iceI_getShortFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Short> getShortFromAsync(short value, java.util.Map<String, String> context)
    {
        return _iceI_getShortFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Short> _iceI_getShortFromAsync(short iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Short> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getShortFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShort(iceP_value);
                 }, istr -> {
                     short ret;
                     ret = istr.readShort();
                     return ret;
                 });
        return f;
    }

    default short[] getShortArr()
    {
        return getShortArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default short[] getShortArr(java.util.Map<String, String> context)
    {
        return _iceI_getShortArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<short[]> getShortArrAsync()
    {
        return _iceI_getShortArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<short[]> getShortArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getShortArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<short[]> _iceI_getShortArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<short[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getShortArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     short[] ret;
                     ret = istr.readShortSeq();
                     return ret;
                 });
        return f;
    }

    default short[] getShortArrFrom(short[] arr)
    {
        return getShortArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default short[] getShortArrFrom(short[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getShortArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<short[]> getShortArrFromAsync(short[] arr)
    {
        return _iceI_getShortArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<short[]> getShortArrFromAsync(short[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getShortArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<short[]> _iceI_getShortArrFromAsync(short[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<short[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getShortArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeShortSeq(iceP_arr);
                 }, istr -> {
                     short[] ret;
                     ret = istr.readShortSeq();
                     return ret;
                 });
        return f;
    }

    default int getInt()
    {
        return getInt(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int getInt(java.util.Map<String, String> context)
    {
        return _iceI_getIntAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Integer> getIntAsync()
    {
        return _iceI_getIntAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Integer> getIntAsync(java.util.Map<String, String> context)
    {
        return _iceI_getIntAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Integer> _iceI_getIntAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getInt", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int getIntFrom(int value)
    {
        return getIntFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int getIntFrom(int value, java.util.Map<String, String> context)
    {
        return _iceI_getIntFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Integer> getIntFromAsync(int value)
    {
        return _iceI_getIntFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Integer> getIntFromAsync(int value, java.util.Map<String, String> context)
    {
        return _iceI_getIntFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Integer> _iceI_getIntFromAsync(int iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getIntFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_value);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default int[] getIntArr()
    {
        return getIntArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int[] getIntArr(java.util.Map<String, String> context)
    {
        return _iceI_getIntArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<int[]> getIntArrAsync()
    {
        return _iceI_getIntArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<int[]> getIntArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getIntArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<int[]> _iceI_getIntArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<int[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getIntArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     int[] ret;
                     ret = istr.readIntSeq();
                     return ret;
                 });
        return f;
    }

    default int[] getIntArrFrom(int[] arr)
    {
        return getIntArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int[] getIntArrFrom(int[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getIntArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<int[]> getIntArrFromAsync(int[] arr)
    {
        return _iceI_getIntArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<int[]> getIntArrFromAsync(int[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getIntArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<int[]> _iceI_getIntArrFromAsync(int[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<int[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getIntArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeIntSeq(iceP_arr);
                 }, istr -> {
                     int[] ret;
                     ret = istr.readIntSeq();
                     return ret;
                 });
        return f;
    }

    default long getLong()
    {
        return getLong(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long getLong(java.util.Map<String, String> context)
    {
        return _iceI_getLongAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Long> getLongAsync()
    {
        return _iceI_getLongAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Long> getLongAsync(java.util.Map<String, String> context)
    {
        return _iceI_getLongAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Long> _iceI_getLongAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Long> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLong", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     long ret;
                     ret = istr.readLong();
                     return ret;
                 });
        return f;
    }

    default long getLongFrom(long value)
    {
        return getLongFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long getLongFrom(long value, java.util.Map<String, String> context)
    {
        return _iceI_getLongFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Long> getLongFromAsync(long value)
    {
        return _iceI_getLongFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Long> getLongFromAsync(long value, java.util.Map<String, String> context)
    {
        return _iceI_getLongFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Long> _iceI_getLongFromAsync(long iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Long> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLongFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLong(iceP_value);
                 }, istr -> {
                     long ret;
                     ret = istr.readLong();
                     return ret;
                 });
        return f;
    }

    default long[] getLongArr()
    {
        return getLongArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long[] getLongArr(java.util.Map<String, String> context)
    {
        return _iceI_getLongArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<long[]> getLongArrAsync()
    {
        return _iceI_getLongArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<long[]> getLongArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getLongArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<long[]> _iceI_getLongArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<long[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLongArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     long[] ret;
                     ret = istr.readLongSeq();
                     return ret;
                 });
        return f;
    }

    default long[] getLongArrFrom(long[] arr)
    {
        return getLongArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long[] getLongArrFrom(long[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getLongArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<long[]> getLongArrFromAsync(long[] arr)
    {
        return _iceI_getLongArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<long[]> getLongArrFromAsync(long[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getLongArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<long[]> _iceI_getLongArrFromAsync(long[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<long[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLongArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeLongSeq(iceP_arr);
                 }, istr -> {
                     long[] ret;
                     ret = istr.readLongSeq();
                     return ret;
                 });
        return f;
    }

    default float getFloat()
    {
        return getFloat(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getFloat(java.util.Map<String, String> context)
    {
        return _iceI_getFloatAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Float> getFloatAsync()
    {
        return _iceI_getFloatAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Float> getFloatAsync(java.util.Map<String, String> context)
    {
        return _iceI_getFloatAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Float> _iceI_getFloatAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFloat", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    default float getFloatFrom(float value)
    {
        return getFloatFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float getFloatFrom(float value, java.util.Map<String, String> context)
    {
        return _iceI_getFloatFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Float> getFloatFromAsync(float value)
    {
        return _iceI_getFloatFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Float> getFloatFromAsync(float value, java.util.Map<String, String> context)
    {
        return _iceI_getFloatFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Float> _iceI_getFloatFromAsync(float iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Float> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFloatFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloat(iceP_value);
                 }, istr -> {
                     float ret;
                     ret = istr.readFloat();
                     return ret;
                 });
        return f;
    }

    default float[] getFloatArr()
    {
        return getFloatArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float[] getFloatArr(java.util.Map<String, String> context)
    {
        return _iceI_getFloatArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<float[]> getFloatArrAsync()
    {
        return _iceI_getFloatArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<float[]> getFloatArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getFloatArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<float[]> _iceI_getFloatArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<float[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFloatArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     float[] ret;
                     ret = istr.readFloatSeq();
                     return ret;
                 });
        return f;
    }

    default float[] getFloatArrFrom(float[] arr)
    {
        return getFloatArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default float[] getFloatArrFrom(float[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getFloatArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<float[]> getFloatArrFromAsync(float[] arr)
    {
        return _iceI_getFloatArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<float[]> getFloatArrFromAsync(float[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getFloatArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<float[]> _iceI_getFloatArrFromAsync(float[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<float[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFloatArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeFloatSeq(iceP_arr);
                 }, istr -> {
                     float[] ret;
                     ret = istr.readFloatSeq();
                     return ret;
                 });
        return f;
    }

    default double getDouble()
    {
        return getDouble(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default double getDouble(java.util.Map<String, String> context)
    {
        return _iceI_getDoubleAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Double> getDoubleAsync()
    {
        return _iceI_getDoubleAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Double> getDoubleAsync(java.util.Map<String, String> context)
    {
        return _iceI_getDoubleAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Double> _iceI_getDoubleAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Double> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getDouble", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     double ret;
                     ret = istr.readDouble();
                     return ret;
                 });
        return f;
    }

    default double getDoubleFrom(double value)
    {
        return getDoubleFrom(value, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default double getDoubleFrom(double value, java.util.Map<String, String> context)
    {
        return _iceI_getDoubleFromAsync(value, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Double> getDoubleFromAsync(double value)
    {
        return _iceI_getDoubleFromAsync(value, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Double> getDoubleFromAsync(double value, java.util.Map<String, String> context)
    {
        return _iceI_getDoubleFromAsync(value, context, false);
    }

    /**
     * @hidden
     * @param iceP_value -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Double> _iceI_getDoubleFromAsync(double iceP_value, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Double> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getDoubleFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDouble(iceP_value);
                 }, istr -> {
                     double ret;
                     ret = istr.readDouble();
                     return ret;
                 });
        return f;
    }

    default double[] getDoubleArr()
    {
        return getDoubleArr(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default double[] getDoubleArr(java.util.Map<String, String> context)
    {
        return _iceI_getDoubleArrAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<double[]> getDoubleArrAsync()
    {
        return _iceI_getDoubleArrAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<double[]> getDoubleArrAsync(java.util.Map<String, String> context)
    {
        return _iceI_getDoubleArrAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<double[]> _iceI_getDoubleArrAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<double[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getDoubleArr", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     double[] ret;
                     ret = istr.readDoubleSeq();
                     return ret;
                 });
        return f;
    }

    default double[] getDoubleArrFrom(double[] arr)
    {
        return getDoubleArrFrom(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default double[] getDoubleArrFrom(double[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getDoubleArrFromAsync(arr, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<double[]> getDoubleArrFromAsync(double[] arr)
    {
        return _iceI_getDoubleArrFromAsync(arr, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<double[]> getDoubleArrFromAsync(double[] arr, java.util.Map<String, String> context)
    {
        return _iceI_getDoubleArrFromAsync(arr, context, false);
    }

    /**
     * @hidden
     * @param iceP_arr -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<double[]> _iceI_getDoubleArrFromAsync(double[] iceP_arr, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<double[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getDoubleArrFrom", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeDoubleSeq(iceP_arr);
                 }, istr -> {
                     double[] ret;
                     ret = istr.readDoubleSeq();
                     return ret;
                 });
        return f;
    }

    default String execute(Request request)
    {
        return execute(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String execute(Request request, java.util.Map<String, String> context)
    {
        return _iceI_executeAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String> executeAsync(Request request)
    {
        return _iceI_executeAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String> executeAsync(Request request, java.util.Map<String, String> context)
    {
        return _iceI_executeAsync(request, context, false);
    }

    /**
     * @hidden
     * @param iceP_request -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String> _iceI_executeAsync(Request iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "execute", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     Request.ice_write(ostr, iceP_request);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static GoicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), GoicePrx.class, _GoicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static GoicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), GoicePrx.class, _GoicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static GoicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), GoicePrx.class, _GoicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static GoicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), GoicePrx.class, _GoicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static GoicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, GoicePrx.class, _GoicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static GoicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, GoicePrx.class, _GoicePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default GoicePrx ice_context(java.util.Map<String, String> newContext)
    {
        return (GoicePrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default GoicePrx ice_adapterId(String newAdapterId)
    {
        return (GoicePrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default GoicePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (GoicePrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default GoicePrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (GoicePrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default GoicePrx ice_invocationTimeout(int newTimeout)
    {
        return (GoicePrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default GoicePrx ice_connectionCached(boolean newCache)
    {
        return (GoicePrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default GoicePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (GoicePrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default GoicePrx ice_secure(boolean b)
    {
        return (GoicePrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default GoicePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (GoicePrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default GoicePrx ice_preferSecure(boolean b)
    {
        return (GoicePrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default GoicePrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (GoicePrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default GoicePrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (GoicePrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default GoicePrx ice_collocationOptimized(boolean b)
    {
        return (GoicePrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default GoicePrx ice_twoway()
    {
        return (GoicePrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default GoicePrx ice_oneway()
    {
        return (GoicePrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default GoicePrx ice_batchOneway()
    {
        return (GoicePrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default GoicePrx ice_datagram()
    {
        return (GoicePrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default GoicePrx ice_batchDatagram()
    {
        return (GoicePrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default GoicePrx ice_compress(boolean co)
    {
        return (GoicePrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default GoicePrx ice_timeout(int t)
    {
        return (GoicePrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default GoicePrx ice_connectionId(String connectionId)
    {
        return (GoicePrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default GoicePrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (GoicePrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::goiceinter::Goice";
    }
}

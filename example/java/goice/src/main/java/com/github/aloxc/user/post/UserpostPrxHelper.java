// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `userpost.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.github.aloxc.user.post;

/**
 * Provides type-specific helper functions.
 **/
public final class UserpostPrxHelper extends Ice.ObjectPrxHelperBase implements UserpostPrx
{
    private static final String __doarr_name = "doarr";

    public String doarr(String[] sar, int[] iarr, String key, String value, int i)
    {
        return doarr(sar, iarr, key, value, i, null, false);
    }

    public String doarr(String[] sar, int[] iarr, String key, String value, int i, java.util.Map<String, String> __ctx)
    {
        return doarr(sar, iarr, key, value, i, __ctx, true);
    }

    private String doarr(String[] sar, int[] iarr, String key, String value, int i, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__doarr_name);
        return end_doarr(begin_doarr(sar, iarr, key, value, i, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_doarr(String[] sar, int[] iarr, String key, String value, int i)
    {
        return begin_doarr(sar, iarr, key, value, i, null, false, false, null);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, int[] iarr, String key, String value, int i, java.util.Map<String, String> __ctx)
    {
        return begin_doarr(sar, iarr, key, value, i, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, int[] iarr, String key, String value, int i, Ice.Callback __cb)
    {
        return begin_doarr(sar, iarr, key, value, i, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, int[] iarr, String key, String value, int i, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_doarr(sar, iarr, key, value, i, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, int[] iarr, String key, String value, int i, Callback_Userpost_doarr __cb)
    {
        return begin_doarr(sar, iarr, key, value, i, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, int[] iarr, String key, String value, int i, java.util.Map<String, String> __ctx, Callback_Userpost_doarr __cb)
    {
        return begin_doarr(sar, iarr, key, value, i, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, 
                                       int[] iarr, 
                                       String key, 
                                       String value, 
                                       int i, 
                                       IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_doarr(sar, iarr, key, value, i, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, 
                                       int[] iarr, 
                                       String key, 
                                       String value, 
                                       int i, 
                                       IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_doarr(sar, iarr, key, value, i, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, 
                                       int[] iarr, 
                                       String key, 
                                       String value, 
                                       int i, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_doarr(sar, iarr, key, value, i, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_doarr(String[] sar, 
                                       int[] iarr, 
                                       String key, 
                                       String value, 
                                       int i, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_doarr(sar, iarr, key, value, i, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_doarr(String[] sar, 
                                        int[] iarr, 
                                        String key, 
                                        String value, 
                                        int i, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_doarr(sar, iarr, key, value, i, __ctx, __explicitCtx, __synchronous, 
                           new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                               {
                                   public final void __completed(Ice.AsyncResult __result)
                                   {
                                       UserpostPrxHelper.__doarr_completed(this, __result);
                                   }
                               });
    }

    private Ice.AsyncResult begin_doarr(String[] sar, 
                                        int[] iarr, 
                                        String key, 
                                        String value, 
                                        int i, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__doarr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__doarr_name, __cb);
        try
        {
            __result.prepare(__doarr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            StrArrHelper.write(__os, sar);
            IntArrHelper.write(__os, iarr);
            __os.writeString(key);
            __os.writeString(value);
            __os.writeInt(i);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_doarr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __doarr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __doarr_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        UserpostPrx __proxy = (UserpostPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_doarr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getIntArr_name = "getIntArr";

    public int[] getIntArr(int i)
    {
        return getIntArr(i, null, false);
    }

    public int[] getIntArr(int i, java.util.Map<String, String> __ctx)
    {
        return getIntArr(i, __ctx, true);
    }

    private int[] getIntArr(int i, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getIntArr_name);
        return end_getIntArr(begin_getIntArr(i, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getIntArr(int i)
    {
        return begin_getIntArr(i, null, false, false, null);
    }

    public Ice.AsyncResult begin_getIntArr(int i, java.util.Map<String, String> __ctx)
    {
        return begin_getIntArr(i, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getIntArr(int i, Ice.Callback __cb)
    {
        return begin_getIntArr(i, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(int i, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getIntArr(i, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(int i, Callback_Userpost_getIntArr __cb)
    {
        return begin_getIntArr(i, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(int i, java.util.Map<String, String> __ctx, Callback_Userpost_getIntArr __cb)
    {
        return begin_getIntArr(i, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(int i, 
                                           IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntArr(i, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntArr(int i, 
                                           IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArr(i, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getIntArr(int i, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntArr(i, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntArr(int i, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArr(i, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getIntArr(int i, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArr(i, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<int[]>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           UserpostPrxHelper.__getIntArr_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_getIntArr(int i, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getIntArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getIntArr_name, __cb);
        try
        {
            __result.prepare(__getIntArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(i);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int[] end_getIntArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getIntArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int[] __ret;
            __ret = IntArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getIntArr_completed(Ice.TwowayCallbackArg1<int[]> __cb, Ice.AsyncResult __result)
    {
        UserpostPrx __proxy = (UserpostPrx)__result.getProxy();
        int[] __ret = null;
        try
        {
            __ret = __proxy.end_getIntArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getStrArr_name = "getStrArr";

    public String[] getStrArr(int i)
    {
        return getStrArr(i, null, false);
    }

    public String[] getStrArr(int i, java.util.Map<String, String> __ctx)
    {
        return getStrArr(i, __ctx, true);
    }

    private String[] getStrArr(int i, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getStrArr_name);
        return end_getStrArr(begin_getStrArr(i, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getStrArr(int i)
    {
        return begin_getStrArr(i, null, false, false, null);
    }

    public Ice.AsyncResult begin_getStrArr(int i, java.util.Map<String, String> __ctx)
    {
        return begin_getStrArr(i, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getStrArr(int i, Ice.Callback __cb)
    {
        return begin_getStrArr(i, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStrArr(int i, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStrArr(i, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStrArr(int i, Callback_Userpost_getStrArr __cb)
    {
        return begin_getStrArr(i, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStrArr(int i, java.util.Map<String, String> __ctx, Callback_Userpost_getStrArr __cb)
    {
        return begin_getStrArr(i, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStrArr(int i, 
                                           IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStrArr(i, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStrArr(int i, 
                                           IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStrArr(i, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getStrArr(int i, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStrArr(i, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStrArr(int i, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStrArr(i, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getStrArr(int i, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStrArr(i, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           UserpostPrxHelper.__getStrArr_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_getStrArr(int i, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStrArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getStrArr_name, __cb);
        try
        {
            __result.prepare(__getStrArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(i);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getStrArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getStrArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = StrArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getStrArr_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        UserpostPrx __proxy = (UserpostPrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_getStrArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __threeparams_name = "threeparams";

    public String threeparams(String name, int value, double any)
    {
        return threeparams(name, value, any, null, false);
    }

    public String threeparams(String name, int value, double any, java.util.Map<String, String> __ctx)
    {
        return threeparams(name, value, any, __ctx, true);
    }

    private String threeparams(String name, int value, double any, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__threeparams_name);
        return end_threeparams(begin_threeparams(name, value, any, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_threeparams(String name, int value, double any)
    {
        return begin_threeparams(name, value, any, null, false, false, null);
    }

    public Ice.AsyncResult begin_threeparams(String name, int value, double any, java.util.Map<String, String> __ctx)
    {
        return begin_threeparams(name, value, any, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_threeparams(String name, int value, double any, Ice.Callback __cb)
    {
        return begin_threeparams(name, value, any, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_threeparams(String name, int value, double any, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_threeparams(name, value, any, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_threeparams(String name, int value, double any, Callback_Userpost_threeparams __cb)
    {
        return begin_threeparams(name, value, any, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_threeparams(String name, int value, double any, java.util.Map<String, String> __ctx, Callback_Userpost_threeparams __cb)
    {
        return begin_threeparams(name, value, any, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_threeparams(String name, 
                                             int value, 
                                             double any, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_threeparams(name, value, any, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_threeparams(String name, 
                                             int value, 
                                             double any, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_threeparams(name, value, any, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_threeparams(String name, 
                                             int value, 
                                             double any, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_threeparams(name, value, any, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_threeparams(String name, 
                                             int value, 
                                             double any, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_threeparams(name, value, any, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_threeparams(String name, 
                                              int value, 
                                              double any, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_threeparams(name, value, any, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             UserpostPrxHelper.__threeparams_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_threeparams(String name, 
                                              int value, 
                                              double any, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__threeparams_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__threeparams_name, __cb);
        try
        {
            __result.prepare(__threeparams_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeInt(value);
            __os.writeDouble(any);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_threeparams(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __threeparams_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __threeparams_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        UserpostPrx __proxy = (UserpostPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_threeparams(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __todo_name = "todo";

    public String todo(String json)
    {
        return todo(json, null, false);
    }

    public String todo(String json, java.util.Map<String, String> __ctx)
    {
        return todo(json, __ctx, true);
    }

    private String todo(String json, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__todo_name);
        return end_todo(begin_todo(json, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_todo(String json)
    {
        return begin_todo(json, null, false, false, null);
    }

    public Ice.AsyncResult begin_todo(String json, java.util.Map<String, String> __ctx)
    {
        return begin_todo(json, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_todo(String json, Ice.Callback __cb)
    {
        return begin_todo(json, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_todo(String json, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_todo(json, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_todo(String json, Callback_Userpost_todo __cb)
    {
        return begin_todo(json, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_todo(String json, java.util.Map<String, String> __ctx, Callback_Userpost_todo __cb)
    {
        return begin_todo(json, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_todo(String json, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_todo(json, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_todo(String json, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_todo(json, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_todo(String json, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_todo(json, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_todo(String json, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_todo(json, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_todo(String json, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_todo(json, __ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      UserpostPrxHelper.__todo_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_todo(String json, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__todo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__todo_name, __cb);
        try
        {
            __result.prepare(__todo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(json);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_todo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __todo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __todo_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        UserpostPrx __proxy = (UserpostPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_todo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __valuelong_name = "valuelong";

    public String valuelong(String name, long value)
    {
        return valuelong(name, value, null, false);
    }

    public String valuelong(String name, long value, java.util.Map<String, String> __ctx)
    {
        return valuelong(name, value, __ctx, true);
    }

    private String valuelong(String name, long value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__valuelong_name);
        return end_valuelong(begin_valuelong(name, value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_valuelong(String name, long value)
    {
        return begin_valuelong(name, value, null, false, false, null);
    }

    public Ice.AsyncResult begin_valuelong(String name, long value, java.util.Map<String, String> __ctx)
    {
        return begin_valuelong(name, value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_valuelong(String name, long value, Ice.Callback __cb)
    {
        return begin_valuelong(name, value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_valuelong(String name, long value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_valuelong(name, value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_valuelong(String name, long value, Callback_Userpost_valuelong __cb)
    {
        return begin_valuelong(name, value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_valuelong(String name, long value, java.util.Map<String, String> __ctx, Callback_Userpost_valuelong __cb)
    {
        return begin_valuelong(name, value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_valuelong(String name, 
                                           long value, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_valuelong(name, value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_valuelong(String name, 
                                           long value, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_valuelong(name, value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_valuelong(String name, 
                                           long value, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_valuelong(name, value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_valuelong(String name, 
                                           long value, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_valuelong(name, value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_valuelong(String name, 
                                            long value, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_valuelong(name, value, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           UserpostPrxHelper.__valuelong_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_valuelong(String name, 
                                            long value, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__valuelong_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__valuelong_name, __cb);
        try
        {
            __result.prepare(__valuelong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeLong(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_valuelong(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __valuelong_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __valuelong_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        UserpostPrx __proxy = (UserpostPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_valuelong(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __valuestr_name = "valuestr";

    public String valuestr(String name, String value)
    {
        return valuestr(name, value, null, false);
    }

    public String valuestr(String name, String value, java.util.Map<String, String> __ctx)
    {
        return valuestr(name, value, __ctx, true);
    }

    private String valuestr(String name, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__valuestr_name);
        return end_valuestr(begin_valuestr(name, value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_valuestr(String name, String value)
    {
        return begin_valuestr(name, value, null, false, false, null);
    }

    public Ice.AsyncResult begin_valuestr(String name, String value, java.util.Map<String, String> __ctx)
    {
        return begin_valuestr(name, value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_valuestr(String name, String value, Ice.Callback __cb)
    {
        return begin_valuestr(name, value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_valuestr(String name, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_valuestr(name, value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_valuestr(String name, String value, Callback_Userpost_valuestr __cb)
    {
        return begin_valuestr(name, value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_valuestr(String name, String value, java.util.Map<String, String> __ctx, Callback_Userpost_valuestr __cb)
    {
        return begin_valuestr(name, value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_valuestr(String name, 
                                          String value, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_valuestr(name, value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_valuestr(String name, 
                                          String value, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_valuestr(name, value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_valuestr(String name, 
                                          String value, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_valuestr(name, value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_valuestr(String name, 
                                          String value, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_valuestr(name, value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_valuestr(String name, 
                                           String value, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_valuestr(name, value, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          UserpostPrxHelper.__valuestr_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_valuestr(String name, 
                                           String value, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__valuestr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__valuestr_name, __cb);
        try
        {
            __result.prepare(__valuestr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_valuestr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __valuestr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __valuestr_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        UserpostPrx __proxy = (UserpostPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_valuestr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserpostPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), UserpostPrx.class, UserpostPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserpostPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), UserpostPrx.class, UserpostPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserpostPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), UserpostPrx.class, UserpostPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static UserpostPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), UserpostPrx.class, UserpostPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static UserpostPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, UserpostPrx.class, UserpostPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static UserpostPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, UserpostPrx.class, UserpostPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::user::post::Userpost"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, UserpostPrx v)
    {
        __os.writeProxy(v);
    }

    public static UserpostPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            UserpostPrxHelper result = new UserpostPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}

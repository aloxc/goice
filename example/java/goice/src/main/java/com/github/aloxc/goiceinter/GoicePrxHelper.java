// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `goice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.github.aloxc.goiceinter;

/**
 * Provides type-specific helper functions.
 **/
public final class GoicePrxHelper extends Ice.ObjectPrxHelperBase implements GoicePrx
{
    private static final String __execute_name = "execute";

    public String execute(Request request)
    {
        return execute(request, null, false);
    }

    public String execute(Request request, java.util.Map<String, String> __ctx)
    {
        return execute(request, __ctx, true);
    }

    private String execute(Request request, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__execute_name);
        return end_execute(begin_execute(request, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_execute(Request request)
    {
        return begin_execute(request, null, false, false, null);
    }

    public Ice.AsyncResult begin_execute(Request request, java.util.Map<String, String> __ctx)
    {
        return begin_execute(request, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_execute(Request request, Ice.Callback __cb)
    {
        return begin_execute(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_execute(Request request, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_execute(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_execute(Request request, Callback_Goice_execute __cb)
    {
        return begin_execute(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_execute(Request request, java.util.Map<String, String> __ctx, Callback_Goice_execute __cb)
    {
        return begin_execute(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_execute(Request request, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_execute(request, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_execute(Request request, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_execute(request, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_execute(Request request, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_execute(request, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_execute(Request request, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_execute(request, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_execute(Request request, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_execute(request, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         GoicePrxHelper.__execute_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_execute(Request request, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__execute_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__execute_name, __cb);
        try
        {
            __result.prepare(__execute_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Request.__write(__os, request);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_execute(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __execute_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __execute_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_execute(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getBool_name = "getBool";

    public boolean getBool()
    {
        return getBool(null, false);
    }

    public boolean getBool(java.util.Map<String, String> __ctx)
    {
        return getBool(__ctx, true);
    }

    private boolean getBool(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getBool_name);
        return end_getBool(begin_getBool(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getBool()
    {
        return begin_getBool(null, false, false, null);
    }

    public Ice.AsyncResult begin_getBool(java.util.Map<String, String> __ctx)
    {
        return begin_getBool(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getBool(Ice.Callback __cb)
    {
        return begin_getBool(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBool(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBool(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBool(Callback_Goice_getBool __cb)
    {
        return begin_getBool(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBool(java.util.Map<String, String> __ctx, Callback_Goice_getBool __cb)
    {
        return begin_getBool(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBool(IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBool(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBool(IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBool(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getBool(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBool(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBool(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBool(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getBool(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_BoolCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBool(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         GoicePrxHelper.__getBool_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getBool(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBool_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getBool_name, __cb);
        try
        {
            __result.prepare(__getBool_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_getBool(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getBool_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getBool_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_getBool(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getBoolArr_name = "getBoolArr";

    public boolean[] getBoolArr()
    {
        return getBoolArr(null, false);
    }

    public boolean[] getBoolArr(java.util.Map<String, String> __ctx)
    {
        return getBoolArr(__ctx, true);
    }

    private boolean[] getBoolArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getBoolArr_name);
        return end_getBoolArr(begin_getBoolArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getBoolArr()
    {
        return begin_getBoolArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getBoolArr(java.util.Map<String, String> __ctx)
    {
        return begin_getBoolArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getBoolArr(Ice.Callback __cb)
    {
        return begin_getBoolArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBoolArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArr(Callback_Goice_getBoolArr __cb)
    {
        return begin_getBoolArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArr(java.util.Map<String, String> __ctx, Callback_Goice_getBoolArr __cb)
    {
        return begin_getBoolArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArr(IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBoolArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBoolArr(IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getBoolArr(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBoolArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBoolArr(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getBoolArr(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolArr(__ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<boolean[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            GoicePrxHelper.__getBoolArr_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getBoolArr(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBoolArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getBoolArr_name, __cb);
        try
        {
            __result.prepare(__getBoolArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean[] end_getBoolArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getBoolArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean[] __ret;
            __ret = BoolArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getBoolArr_completed(Ice.TwowayCallbackArg1<boolean[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        boolean[] __ret = null;
        try
        {
            __ret = __proxy.end_getBoolArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getBoolArrFrom_name = "getBoolArrFrom";

    public boolean[] getBoolArrFrom(boolean[] arr)
    {
        return getBoolArrFrom(arr, null, false);
    }

    public boolean[] getBoolArrFrom(boolean[] arr, java.util.Map<String, String> __ctx)
    {
        return getBoolArrFrom(arr, __ctx, true);
    }

    private boolean[] getBoolArrFrom(boolean[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getBoolArrFrom_name);
        return end_getBoolArrFrom(begin_getBoolArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr)
    {
        return begin_getBoolArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getBoolArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, Ice.Callback __cb)
    {
        return begin_getBoolArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBoolArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, Callback_Goice_getBoolArrFrom __cb)
    {
        return begin_getBoolArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getBoolArrFrom __cb)
    {
        return begin_getBoolArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, 
                                                IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBoolArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, 
                                                IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBoolArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<boolean[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<boolean[]>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                GoicePrxHelper.__getBoolArrFrom_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_getBoolArrFrom(boolean[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBoolArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getBoolArrFrom_name, __cb);
        try
        {
            __result.prepare(__getBoolArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            BoolArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean[] end_getBoolArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getBoolArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean[] __ret;
            __ret = BoolArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getBoolArrFrom_completed(Ice.TwowayCallbackArg1<boolean[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        boolean[] __ret = null;
        try
        {
            __ret = __proxy.end_getBoolArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getBoolFrom_name = "getBoolFrom";

    public boolean getBoolFrom(boolean value)
    {
        return getBoolFrom(value, null, false);
    }

    public boolean getBoolFrom(boolean value, java.util.Map<String, String> __ctx)
    {
        return getBoolFrom(value, __ctx, true);
    }

    private boolean getBoolFrom(boolean value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getBoolFrom_name);
        return end_getBoolFrom(begin_getBoolFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value)
    {
        return begin_getBoolFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, java.util.Map<String, String> __ctx)
    {
        return begin_getBoolFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, Ice.Callback __cb)
    {
        return begin_getBoolFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBoolFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, Callback_Goice_getBoolFrom __cb)
    {
        return begin_getBoolFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, java.util.Map<String, String> __ctx, Callback_Goice_getBoolFrom __cb)
    {
        return begin_getBoolFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBoolFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getBoolFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getBoolFrom(boolean value, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getBoolFrom(boolean value, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getBoolFrom(value, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             GoicePrxHelper.__getBoolFrom_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_getBoolFrom(boolean value, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBoolFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getBoolFrom_name, __cb);
        try
        {
            __result.prepare(__getBoolFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_getBoolFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getBoolFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getBoolFrom_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_getBoolFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getByte_name = "getByte";

    public byte getByte()
    {
        return getByte(null, false);
    }

    public byte getByte(java.util.Map<String, String> __ctx)
    {
        return getByte(__ctx, true);
    }

    private byte getByte(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getByte_name);
        return end_getByte(begin_getByte(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getByte()
    {
        return begin_getByte(null, false, false, null);
    }

    public Ice.AsyncResult begin_getByte(java.util.Map<String, String> __ctx)
    {
        return begin_getByte(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getByte(Ice.Callback __cb)
    {
        return begin_getByte(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByte(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getByte(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByte(Callback_Goice_getByte __cb)
    {
        return begin_getByte(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByte(java.util.Map<String, String> __ctx, Callback_Goice_getByte __cb)
    {
        return begin_getByte(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByte(IceInternal.Functional_ByteCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByte(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByte(IceInternal.Functional_ByteCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByte(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getByte(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_ByteCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByte(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByte(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_ByteCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByte(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getByte(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_ByteCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByte(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackByte(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         GoicePrxHelper.__getByte_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getByte(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getByte_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getByte_name, __cb);
        try
        {
            __result.prepare(__getByte_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public byte end_getByte(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getByte_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            byte __ret;
            __ret = __is.readByte();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getByte_completed(Ice.TwowayCallbackByte __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        byte __ret = (byte)0;
        try
        {
            __ret = __proxy.end_getByte(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getByteArr_name = "getByteArr";

    public byte[] getByteArr()
    {
        return getByteArr(null, false);
    }

    public byte[] getByteArr(java.util.Map<String, String> __ctx)
    {
        return getByteArr(__ctx, true);
    }

    private byte[] getByteArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getByteArr_name);
        return end_getByteArr(begin_getByteArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getByteArr()
    {
        return begin_getByteArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getByteArr(java.util.Map<String, String> __ctx)
    {
        return begin_getByteArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getByteArr(Ice.Callback __cb)
    {
        return begin_getByteArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getByteArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArr(Callback_Goice_getByteArr __cb)
    {
        return begin_getByteArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArr(java.util.Map<String, String> __ctx, Callback_Goice_getByteArr __cb)
    {
        return begin_getByteArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArr(IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByteArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByteArr(IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getByteArr(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByteArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByteArr(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getByteArr(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteArr(__ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<byte[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            GoicePrxHelper.__getByteArr_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getByteArr(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getByteArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getByteArr_name, __cb);
        try
        {
            __result.prepare(__getByteArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public byte[] end_getByteArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getByteArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            byte[] __ret;
            __ret = ByteArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getByteArr_completed(Ice.TwowayCallbackArg1<byte[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        byte[] __ret = null;
        try
        {
            __ret = __proxy.end_getByteArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getByteArrFrom_name = "getByteArrFrom";

    public byte[] getByteArrFrom(byte[] arr)
    {
        return getByteArrFrom(arr, null, false);
    }

    public byte[] getByteArrFrom(byte[] arr, java.util.Map<String, String> __ctx)
    {
        return getByteArrFrom(arr, __ctx, true);
    }

    private byte[] getByteArrFrom(byte[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getByteArrFrom_name);
        return end_getByteArrFrom(begin_getByteArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr)
    {
        return begin_getByteArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getByteArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, Ice.Callback __cb)
    {
        return begin_getByteArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getByteArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, Callback_Goice_getByteArrFrom __cb)
    {
        return begin_getByteArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getByteArrFrom __cb)
    {
        return begin_getByteArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, 
                                                IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByteArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, 
                                                IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByteArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByteArrFrom(byte[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getByteArrFrom(byte[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<byte[]>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                GoicePrxHelper.__getByteArrFrom_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_getByteArrFrom(byte[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getByteArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getByteArrFrom_name, __cb);
        try
        {
            __result.prepare(__getByteArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ByteArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public byte[] end_getByteArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getByteArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            byte[] __ret;
            __ret = ByteArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getByteArrFrom_completed(Ice.TwowayCallbackArg1<byte[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        byte[] __ret = null;
        try
        {
            __ret = __proxy.end_getByteArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getByteFrom_name = "getByteFrom";

    public byte getByteFrom(byte value)
    {
        return getByteFrom(value, null, false);
    }

    public byte getByteFrom(byte value, java.util.Map<String, String> __ctx)
    {
        return getByteFrom(value, __ctx, true);
    }

    private byte getByteFrom(byte value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getByteFrom_name);
        return end_getByteFrom(begin_getByteFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getByteFrom(byte value)
    {
        return begin_getByteFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, java.util.Map<String, String> __ctx)
    {
        return begin_getByteFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, Ice.Callback __cb)
    {
        return begin_getByteFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getByteFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, Callback_Goice_getByteFrom __cb)
    {
        return begin_getByteFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, java.util.Map<String, String> __ctx, Callback_Goice_getByteFrom __cb)
    {
        return begin_getByteFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, 
                                             IceInternal.Functional_ByteCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByteFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, 
                                             IceInternal.Functional_ByteCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_ByteCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getByteFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getByteFrom(byte value, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_ByteCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getByteFrom(byte value, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_ByteCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getByteFrom(value, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackByte(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             GoicePrxHelper.__getByteFrom_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_getByteFrom(byte value, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getByteFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getByteFrom_name, __cb);
        try
        {
            __result.prepare(__getByteFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeByte(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public byte end_getByteFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getByteFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            byte __ret;
            __ret = __is.readByte();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getByteFrom_completed(Ice.TwowayCallbackByte __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        byte __ret = (byte)0;
        try
        {
            __ret = __proxy.end_getByteFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getDouble_name = "getDouble";

    public double getDouble()
    {
        return getDouble(null, false);
    }

    public double getDouble(java.util.Map<String, String> __ctx)
    {
        return getDouble(__ctx, true);
    }

    private double getDouble(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDouble_name);
        return end_getDouble(begin_getDouble(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDouble()
    {
        return begin_getDouble(null, false, false, null);
    }

    public Ice.AsyncResult begin_getDouble(java.util.Map<String, String> __ctx)
    {
        return begin_getDouble(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDouble(Ice.Callback __cb)
    {
        return begin_getDouble(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDouble(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDouble(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDouble(Callback_Goice_getDouble __cb)
    {
        return begin_getDouble(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDouble(java.util.Map<String, String> __ctx, Callback_Goice_getDouble __cb)
    {
        return begin_getDouble(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDouble(IceInternal.Functional_DoubleCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDouble(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDouble(IceInternal.Functional_DoubleCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDouble(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDouble(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_DoubleCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDouble(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDouble(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_DoubleCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDouble(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDouble(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_DoubleCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDouble(__ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackDouble(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           GoicePrxHelper.__getDouble_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_getDouble(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDouble_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDouble_name, __cb);
        try
        {
            __result.prepare(__getDouble_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public double end_getDouble(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDouble_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDouble_completed(Ice.TwowayCallbackDouble __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        double __ret = 0.0;
        try
        {
            __ret = __proxy.end_getDouble(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getDoubleArr_name = "getDoubleArr";

    public double[] getDoubleArr()
    {
        return getDoubleArr(null, false);
    }

    public double[] getDoubleArr(java.util.Map<String, String> __ctx)
    {
        return getDoubleArr(__ctx, true);
    }

    private double[] getDoubleArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDoubleArr_name);
        return end_getDoubleArr(begin_getDoubleArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDoubleArr()
    {
        return begin_getDoubleArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getDoubleArr(java.util.Map<String, String> __ctx)
    {
        return begin_getDoubleArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDoubleArr(Ice.Callback __cb)
    {
        return begin_getDoubleArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDoubleArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArr(Callback_Goice_getDoubleArr __cb)
    {
        return begin_getDoubleArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArr(java.util.Map<String, String> __ctx, Callback_Goice_getDoubleArr __cb)
    {
        return begin_getDoubleArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArr(IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDoubleArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDoubleArr(IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDoubleArr(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDoubleArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDoubleArr(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDoubleArr(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleArr(__ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<double[]>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              GoicePrxHelper.__getDoubleArr_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_getDoubleArr(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDoubleArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDoubleArr_name, __cb);
        try
        {
            __result.prepare(__getDoubleArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public double[] end_getDoubleArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDoubleArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            double[] __ret;
            __ret = DoubleArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDoubleArr_completed(Ice.TwowayCallbackArg1<double[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        double[] __ret = null;
        try
        {
            __ret = __proxy.end_getDoubleArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getDoubleArrFrom_name = "getDoubleArrFrom";

    public double[] getDoubleArrFrom(double[] arr)
    {
        return getDoubleArrFrom(arr, null, false);
    }

    public double[] getDoubleArrFrom(double[] arr, java.util.Map<String, String> __ctx)
    {
        return getDoubleArrFrom(arr, __ctx, true);
    }

    private double[] getDoubleArrFrom(double[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDoubleArrFrom_name);
        return end_getDoubleArrFrom(begin_getDoubleArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr)
    {
        return begin_getDoubleArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getDoubleArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, Ice.Callback __cb)
    {
        return begin_getDoubleArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDoubleArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, Callback_Goice_getDoubleArrFrom __cb)
    {
        return begin_getDoubleArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getDoubleArrFrom __cb)
    {
        return begin_getDoubleArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, 
                                                  IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDoubleArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, 
                                                  IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDoubleArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<double[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<double[]>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  GoicePrxHelper.__getDoubleArrFrom_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_getDoubleArrFrom(double[] arr, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDoubleArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDoubleArrFrom_name, __cb);
        try
        {
            __result.prepare(__getDoubleArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            DoubleArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public double[] end_getDoubleArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDoubleArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            double[] __ret;
            __ret = DoubleArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDoubleArrFrom_completed(Ice.TwowayCallbackArg1<double[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        double[] __ret = null;
        try
        {
            __ret = __proxy.end_getDoubleArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getDoubleFrom_name = "getDoubleFrom";

    public double getDoubleFrom(double value)
    {
        return getDoubleFrom(value, null, false);
    }

    public double getDoubleFrom(double value, java.util.Map<String, String> __ctx)
    {
        return getDoubleFrom(value, __ctx, true);
    }

    private double getDoubleFrom(double value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDoubleFrom_name);
        return end_getDoubleFrom(begin_getDoubleFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value)
    {
        return begin_getDoubleFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, java.util.Map<String, String> __ctx)
    {
        return begin_getDoubleFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, Ice.Callback __cb)
    {
        return begin_getDoubleFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDoubleFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, Callback_Goice_getDoubleFrom __cb)
    {
        return begin_getDoubleFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, java.util.Map<String, String> __ctx, Callback_Goice_getDoubleFrom __cb)
    {
        return begin_getDoubleFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, 
                                               IceInternal.Functional_DoubleCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDoubleFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, 
                                               IceInternal.Functional_DoubleCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_DoubleCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDoubleFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDoubleFrom(double value, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_DoubleCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDoubleFrom(double value, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_DoubleCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDoubleFrom(value, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackDouble(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               GoicePrxHelper.__getDoubleFrom_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getDoubleFrom(double value, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDoubleFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDoubleFrom_name, __cb);
        try
        {
            __result.prepare(__getDoubleFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public double end_getDoubleFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDoubleFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDoubleFrom_completed(Ice.TwowayCallbackDouble __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        double __ret = 0.0;
        try
        {
            __ret = __proxy.end_getDoubleFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getFloat_name = "getFloat";

    public float getFloat()
    {
        return getFloat(null, false);
    }

    public float getFloat(java.util.Map<String, String> __ctx)
    {
        return getFloat(__ctx, true);
    }

    private float getFloat(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getFloat_name);
        return end_getFloat(begin_getFloat(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getFloat()
    {
        return begin_getFloat(null, false, false, null);
    }

    public Ice.AsyncResult begin_getFloat(java.util.Map<String, String> __ctx)
    {
        return begin_getFloat(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getFloat(Ice.Callback __cb)
    {
        return begin_getFloat(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloat(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFloat(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloat(Callback_Goice_getFloat __cb)
    {
        return begin_getFloat(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloat(java.util.Map<String, String> __ctx, Callback_Goice_getFloat __cb)
    {
        return begin_getFloat(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloat(IceInternal.Functional_FloatCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloat(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloat(IceInternal.Functional_FloatCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloat(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getFloat(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_FloatCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloat(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloat(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_FloatCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloat(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getFloat(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_FloatCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloat(__ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackFloat(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          GoicePrxHelper.__getFloat_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_getFloat(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFloat_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getFloat_name, __cb);
        try
        {
            __result.prepare(__getFloat_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float end_getFloat(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getFloat_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float __ret;
            __ret = __is.readFloat();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getFloat_completed(Ice.TwowayCallbackFloat __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        float __ret = (float)0.0;
        try
        {
            __ret = __proxy.end_getFloat(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getFloatArr_name = "getFloatArr";

    public float[] getFloatArr()
    {
        return getFloatArr(null, false);
    }

    public float[] getFloatArr(java.util.Map<String, String> __ctx)
    {
        return getFloatArr(__ctx, true);
    }

    private float[] getFloatArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getFloatArr_name);
        return end_getFloatArr(begin_getFloatArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getFloatArr()
    {
        return begin_getFloatArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getFloatArr(java.util.Map<String, String> __ctx)
    {
        return begin_getFloatArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getFloatArr(Ice.Callback __cb)
    {
        return begin_getFloatArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFloatArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArr(Callback_Goice_getFloatArr __cb)
    {
        return begin_getFloatArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArr(java.util.Map<String, String> __ctx, Callback_Goice_getFloatArr __cb)
    {
        return begin_getFloatArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArr(IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloatArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloatArr(IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getFloatArr(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloatArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloatArr(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getFloatArr(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatArr(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<float[]>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             GoicePrxHelper.__getFloatArr_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_getFloatArr(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFloatArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getFloatArr_name, __cb);
        try
        {
            __result.prepare(__getFloatArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float[] end_getFloatArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getFloatArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float[] __ret;
            __ret = FloatArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getFloatArr_completed(Ice.TwowayCallbackArg1<float[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        float[] __ret = null;
        try
        {
            __ret = __proxy.end_getFloatArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getFloatArrFrom_name = "getFloatArrFrom";

    public float[] getFloatArrFrom(float[] arr)
    {
        return getFloatArrFrom(arr, null, false);
    }

    public float[] getFloatArrFrom(float[] arr, java.util.Map<String, String> __ctx)
    {
        return getFloatArrFrom(arr, __ctx, true);
    }

    private float[] getFloatArrFrom(float[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getFloatArrFrom_name);
        return end_getFloatArrFrom(begin_getFloatArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr)
    {
        return begin_getFloatArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getFloatArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, Ice.Callback __cb)
    {
        return begin_getFloatArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFloatArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, Callback_Goice_getFloatArrFrom __cb)
    {
        return begin_getFloatArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getFloatArrFrom __cb)
    {
        return begin_getFloatArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, 
                                                 IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloatArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, 
                                                 IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloatArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloatArrFrom(float[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getFloatArrFrom(float[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<float[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<float[]>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 GoicePrxHelper.__getFloatArrFrom_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getFloatArrFrom(float[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFloatArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getFloatArrFrom_name, __cb);
        try
        {
            __result.prepare(__getFloatArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            FloatArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float[] end_getFloatArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getFloatArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float[] __ret;
            __ret = FloatArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getFloatArrFrom_completed(Ice.TwowayCallbackArg1<float[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        float[] __ret = null;
        try
        {
            __ret = __proxy.end_getFloatArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getFloatFrom_name = "getFloatFrom";

    public float getFloatFrom(float value)
    {
        return getFloatFrom(value, null, false);
    }

    public float getFloatFrom(float value, java.util.Map<String, String> __ctx)
    {
        return getFloatFrom(value, __ctx, true);
    }

    private float getFloatFrom(float value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getFloatFrom_name);
        return end_getFloatFrom(begin_getFloatFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getFloatFrom(float value)
    {
        return begin_getFloatFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, java.util.Map<String, String> __ctx)
    {
        return begin_getFloatFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, Ice.Callback __cb)
    {
        return begin_getFloatFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFloatFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, Callback_Goice_getFloatFrom __cb)
    {
        return begin_getFloatFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, java.util.Map<String, String> __ctx, Callback_Goice_getFloatFrom __cb)
    {
        return begin_getFloatFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, 
                                              IceInternal.Functional_FloatCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloatFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, 
                                              IceInternal.Functional_FloatCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_FloatCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFloatFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFloatFrom(float value, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_FloatCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getFloatFrom(float value, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_FloatCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFloatFrom(value, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackFloat(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              GoicePrxHelper.__getFloatFrom_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_getFloatFrom(float value, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFloatFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getFloatFrom_name, __cb);
        try
        {
            __result.prepare(__getFloatFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public float end_getFloatFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getFloatFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            float __ret;
            __ret = __is.readFloat();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getFloatFrom_completed(Ice.TwowayCallbackFloat __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        float __ret = (float)0.0;
        try
        {
            __ret = __proxy.end_getFloatFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getInt_name = "getInt";

    public int getInt()
    {
        return getInt(null, false);
    }

    public int getInt(java.util.Map<String, String> __ctx)
    {
        return getInt(__ctx, true);
    }

    private int getInt(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getInt_name);
        return end_getInt(begin_getInt(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getInt()
    {
        return begin_getInt(null, false, false, null);
    }

    public Ice.AsyncResult begin_getInt(java.util.Map<String, String> __ctx)
    {
        return begin_getInt(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getInt(Ice.Callback __cb)
    {
        return begin_getInt(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInt(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInt(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInt(Callback_Goice_getInt __cb)
    {
        return begin_getInt(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInt(java.util.Map<String, String> __ctx, Callback_Goice_getInt __cb)
    {
        return begin_getInt(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInt(IceInternal.Functional_IntCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInt(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInt(IceInternal.Functional_IntCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInt(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getInt(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_IntCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInt(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInt(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_IntCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInt(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getInt(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_IntCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInt(__ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        GoicePrxHelper.__getInt_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_getInt(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInt_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getInt_name, __cb);
        try
        {
            __result.prepare(__getInt_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_getInt(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getInt_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getInt_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_getInt(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getIntArr_name = "getIntArr";

    public int[] getIntArr()
    {
        return getIntArr(null, false);
    }

    public int[] getIntArr(java.util.Map<String, String> __ctx)
    {
        return getIntArr(__ctx, true);
    }

    private int[] getIntArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getIntArr_name);
        return end_getIntArr(begin_getIntArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getIntArr()
    {
        return begin_getIntArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getIntArr(java.util.Map<String, String> __ctx)
    {
        return begin_getIntArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getIntArr(Ice.Callback __cb)
    {
        return begin_getIntArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getIntArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(Callback_Goice_getIntArr __cb)
    {
        return begin_getIntArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(java.util.Map<String, String> __ctx, Callback_Goice_getIntArr __cb)
    {
        return begin_getIntArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArr(IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntArr(IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getIntArr(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntArr(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getIntArr(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArr(__ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<int[]>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           GoicePrxHelper.__getIntArr_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_getIntArr(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getIntArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getIntArr_name, __cb);
        try
        {
            __result.prepare(__getIntArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int[] end_getIntArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getIntArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int[] __ret;
            __ret = IntArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getIntArr_completed(Ice.TwowayCallbackArg1<int[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        int[] __ret = null;
        try
        {
            __ret = __proxy.end_getIntArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getIntArrFrom_name = "getIntArrFrom";

    public int[] getIntArrFrom(int[] arr)
    {
        return getIntArrFrom(arr, null, false);
    }

    public int[] getIntArrFrom(int[] arr, java.util.Map<String, String> __ctx)
    {
        return getIntArrFrom(arr, __ctx, true);
    }

    private int[] getIntArrFrom(int[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getIntArrFrom_name);
        return end_getIntArrFrom(begin_getIntArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr)
    {
        return begin_getIntArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getIntArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, Ice.Callback __cb)
    {
        return begin_getIntArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getIntArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, Callback_Goice_getIntArrFrom __cb)
    {
        return begin_getIntArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getIntArrFrom __cb)
    {
        return begin_getIntArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, 
                                               IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, 
                                               IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntArrFrom(int[] arr, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getIntArrFrom(int[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<int[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<int[]>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               GoicePrxHelper.__getIntArrFrom_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getIntArrFrom(int[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getIntArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getIntArrFrom_name, __cb);
        try
        {
            __result.prepare(__getIntArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            IntArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int[] end_getIntArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getIntArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int[] __ret;
            __ret = IntArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getIntArrFrom_completed(Ice.TwowayCallbackArg1<int[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        int[] __ret = null;
        try
        {
            __ret = __proxy.end_getIntArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getIntFrom_name = "getIntFrom";

    public int getIntFrom(int value)
    {
        return getIntFrom(value, null, false);
    }

    public int getIntFrom(int value, java.util.Map<String, String> __ctx)
    {
        return getIntFrom(value, __ctx, true);
    }

    private int getIntFrom(int value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getIntFrom_name);
        return end_getIntFrom(begin_getIntFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getIntFrom(int value)
    {
        return begin_getIntFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, java.util.Map<String, String> __ctx)
    {
        return begin_getIntFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, Ice.Callback __cb)
    {
        return begin_getIntFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getIntFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, Callback_Goice_getIntFrom __cb)
    {
        return begin_getIntFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, java.util.Map<String, String> __ctx, Callback_Goice_getIntFrom __cb)
    {
        return begin_getIntFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, 
                                            IceInternal.Functional_IntCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, 
                                            IceInternal.Functional_IntCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_IntCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getIntFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getIntFrom(int value, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_IntCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getIntFrom(int value, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_IntCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getIntFrom(value, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            GoicePrxHelper.__getIntFrom_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getIntFrom(int value, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getIntFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getIntFrom_name, __cb);
        try
        {
            __result.prepare(__getIntFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_getIntFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getIntFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getIntFrom_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_getIntFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getLong_name = "getLong";

    public long getLong()
    {
        return getLong(null, false);
    }

    public long getLong(java.util.Map<String, String> __ctx)
    {
        return getLong(__ctx, true);
    }

    private long getLong(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getLong_name);
        return end_getLong(begin_getLong(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getLong()
    {
        return begin_getLong(null, false, false, null);
    }

    public Ice.AsyncResult begin_getLong(java.util.Map<String, String> __ctx)
    {
        return begin_getLong(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getLong(Ice.Callback __cb)
    {
        return begin_getLong(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLong(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLong(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLong(Callback_Goice_getLong __cb)
    {
        return begin_getLong(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLong(java.util.Map<String, String> __ctx, Callback_Goice_getLong __cb)
    {
        return begin_getLong(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLong(IceInternal.Functional_LongCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLong(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLong(IceInternal.Functional_LongCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLong(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getLong(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_LongCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLong(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLong(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_LongCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLong(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getLong(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_LongCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLong(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackLong(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         GoicePrxHelper.__getLong_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getLong(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLong_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getLong_name, __cb);
        try
        {
            __result.prepare(__getLong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public long end_getLong(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getLong_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getLong_completed(Ice.TwowayCallbackLong __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        long __ret = 0;
        try
        {
            __ret = __proxy.end_getLong(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getLongArr_name = "getLongArr";

    public long[] getLongArr()
    {
        return getLongArr(null, false);
    }

    public long[] getLongArr(java.util.Map<String, String> __ctx)
    {
        return getLongArr(__ctx, true);
    }

    private long[] getLongArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getLongArr_name);
        return end_getLongArr(begin_getLongArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getLongArr()
    {
        return begin_getLongArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getLongArr(java.util.Map<String, String> __ctx)
    {
        return begin_getLongArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getLongArr(Ice.Callback __cb)
    {
        return begin_getLongArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLongArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArr(Callback_Goice_getLongArr __cb)
    {
        return begin_getLongArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArr(java.util.Map<String, String> __ctx, Callback_Goice_getLongArr __cb)
    {
        return begin_getLongArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArr(IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLongArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLongArr(IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getLongArr(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLongArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLongArr(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getLongArr(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongArr(__ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<long[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            GoicePrxHelper.__getLongArr_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getLongArr(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLongArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getLongArr_name, __cb);
        try
        {
            __result.prepare(__getLongArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public long[] end_getLongArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getLongArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            long[] __ret;
            __ret = LongArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getLongArr_completed(Ice.TwowayCallbackArg1<long[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        long[] __ret = null;
        try
        {
            __ret = __proxy.end_getLongArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getLongArrFrom_name = "getLongArrFrom";

    public long[] getLongArrFrom(long[] arr)
    {
        return getLongArrFrom(arr, null, false);
    }

    public long[] getLongArrFrom(long[] arr, java.util.Map<String, String> __ctx)
    {
        return getLongArrFrom(arr, __ctx, true);
    }

    private long[] getLongArrFrom(long[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getLongArrFrom_name);
        return end_getLongArrFrom(begin_getLongArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr)
    {
        return begin_getLongArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getLongArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, Ice.Callback __cb)
    {
        return begin_getLongArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLongArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, Callback_Goice_getLongArrFrom __cb)
    {
        return begin_getLongArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getLongArrFrom __cb)
    {
        return begin_getLongArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, 
                                                IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLongArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, 
                                                IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLongArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLongArrFrom(long[] arr, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getLongArrFrom(long[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<long[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<long[]>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                GoicePrxHelper.__getLongArrFrom_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_getLongArrFrom(long[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLongArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getLongArrFrom_name, __cb);
        try
        {
            __result.prepare(__getLongArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            LongArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public long[] end_getLongArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getLongArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            long[] __ret;
            __ret = LongArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getLongArrFrom_completed(Ice.TwowayCallbackArg1<long[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        long[] __ret = null;
        try
        {
            __ret = __proxy.end_getLongArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getLongFrom_name = "getLongFrom";

    public long getLongFrom(long value)
    {
        return getLongFrom(value, null, false);
    }

    public long getLongFrom(long value, java.util.Map<String, String> __ctx)
    {
        return getLongFrom(value, __ctx, true);
    }

    private long getLongFrom(long value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getLongFrom_name);
        return end_getLongFrom(begin_getLongFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getLongFrom(long value)
    {
        return begin_getLongFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, java.util.Map<String, String> __ctx)
    {
        return begin_getLongFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, Ice.Callback __cb)
    {
        return begin_getLongFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLongFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, Callback_Goice_getLongFrom __cb)
    {
        return begin_getLongFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, java.util.Map<String, String> __ctx, Callback_Goice_getLongFrom __cb)
    {
        return begin_getLongFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, 
                                             IceInternal.Functional_LongCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLongFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, 
                                             IceInternal.Functional_LongCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_LongCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLongFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLongFrom(long value, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_LongCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getLongFrom(long value, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_LongCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLongFrom(value, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackLong(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             GoicePrxHelper.__getLongFrom_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_getLongFrom(long value, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLongFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getLongFrom_name, __cb);
        try
        {
            __result.prepare(__getLongFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public long end_getLongFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getLongFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getLongFrom_completed(Ice.TwowayCallbackLong __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        long __ret = 0;
        try
        {
            __ret = __proxy.end_getLongFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getShort_name = "getShort";

    public short getShort()
    {
        return getShort(null, false);
    }

    public short getShort(java.util.Map<String, String> __ctx)
    {
        return getShort(__ctx, true);
    }

    private short getShort(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getShort_name);
        return end_getShort(begin_getShort(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getShort()
    {
        return begin_getShort(null, false, false, null);
    }

    public Ice.AsyncResult begin_getShort(java.util.Map<String, String> __ctx)
    {
        return begin_getShort(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getShort(Ice.Callback __cb)
    {
        return begin_getShort(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShort(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShort(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShort(Callback_Goice_getShort __cb)
    {
        return begin_getShort(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShort(java.util.Map<String, String> __ctx, Callback_Goice_getShort __cb)
    {
        return begin_getShort(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShort(IceInternal.Functional_ShortCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShort(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShort(IceInternal.Functional_ShortCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShort(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getShort(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_ShortCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShort(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShort(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_ShortCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShort(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getShort(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_ShortCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShort(__ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackShort(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          GoicePrxHelper.__getShort_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_getShort(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShort_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getShort_name, __cb);
        try
        {
            __result.prepare(__getShort_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public short end_getShort(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getShort_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            short __ret;
            __ret = __is.readShort();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getShort_completed(Ice.TwowayCallbackShort __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        short __ret = (short)0;
        try
        {
            __ret = __proxy.end_getShort(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getShortArr_name = "getShortArr";

    public short[] getShortArr()
    {
        return getShortArr(null, false);
    }

    public short[] getShortArr(java.util.Map<String, String> __ctx)
    {
        return getShortArr(__ctx, true);
    }

    private short[] getShortArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getShortArr_name);
        return end_getShortArr(begin_getShortArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getShortArr()
    {
        return begin_getShortArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getShortArr(java.util.Map<String, String> __ctx)
    {
        return begin_getShortArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getShortArr(Ice.Callback __cb)
    {
        return begin_getShortArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShortArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArr(Callback_Goice_getShortArr __cb)
    {
        return begin_getShortArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArr(java.util.Map<String, String> __ctx, Callback_Goice_getShortArr __cb)
    {
        return begin_getShortArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArr(IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShortArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShortArr(IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getShortArr(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShortArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShortArr(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getShortArr(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortArr(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<short[]>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             GoicePrxHelper.__getShortArr_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_getShortArr(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShortArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getShortArr_name, __cb);
        try
        {
            __result.prepare(__getShortArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public short[] end_getShortArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getShortArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            short[] __ret;
            __ret = ShortArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getShortArr_completed(Ice.TwowayCallbackArg1<short[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        short[] __ret = null;
        try
        {
            __ret = __proxy.end_getShortArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getShortArrFrom_name = "getShortArrFrom";

    public short[] getShortArrFrom(short[] arr)
    {
        return getShortArrFrom(arr, null, false);
    }

    public short[] getShortArrFrom(short[] arr, java.util.Map<String, String> __ctx)
    {
        return getShortArrFrom(arr, __ctx, true);
    }

    private short[] getShortArrFrom(short[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getShortArrFrom_name);
        return end_getShortArrFrom(begin_getShortArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr)
    {
        return begin_getShortArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getShortArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, Ice.Callback __cb)
    {
        return begin_getShortArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShortArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, Callback_Goice_getShortArrFrom __cb)
    {
        return begin_getShortArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getShortArrFrom __cb)
    {
        return begin_getShortArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, 
                                                 IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShortArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, 
                                                 IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShortArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShortArrFrom(short[] arr, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getShortArrFrom(short[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<short[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<short[]>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 GoicePrxHelper.__getShortArrFrom_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getShortArrFrom(short[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShortArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getShortArrFrom_name, __cb);
        try
        {
            __result.prepare(__getShortArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ShortArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public short[] end_getShortArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getShortArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            short[] __ret;
            __ret = ShortArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getShortArrFrom_completed(Ice.TwowayCallbackArg1<short[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        short[] __ret = null;
        try
        {
            __ret = __proxy.end_getShortArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getShortFrom_name = "getShortFrom";

    public short getShortFrom(short value)
    {
        return getShortFrom(value, null, false);
    }

    public short getShortFrom(short value, java.util.Map<String, String> __ctx)
    {
        return getShortFrom(value, __ctx, true);
    }

    private short getShortFrom(short value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getShortFrom_name);
        return end_getShortFrom(begin_getShortFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getShortFrom(short value)
    {
        return begin_getShortFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, java.util.Map<String, String> __ctx)
    {
        return begin_getShortFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, Ice.Callback __cb)
    {
        return begin_getShortFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getShortFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, Callback_Goice_getShortFrom __cb)
    {
        return begin_getShortFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, java.util.Map<String, String> __ctx, Callback_Goice_getShortFrom __cb)
    {
        return begin_getShortFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, 
                                              IceInternal.Functional_ShortCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShortFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, 
                                              IceInternal.Functional_ShortCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_ShortCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getShortFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getShortFrom(short value, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_ShortCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getShortFrom(short value, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_ShortCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getShortFrom(value, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackShort(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              GoicePrxHelper.__getShortFrom_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_getShortFrom(short value, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getShortFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getShortFrom_name, __cb);
        try
        {
            __result.prepare(__getShortFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeShort(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public short end_getShortFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getShortFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            short __ret;
            __ret = __is.readShort();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getShortFrom_completed(Ice.TwowayCallbackShort __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        short __ret = (short)0;
        try
        {
            __ret = __proxy.end_getShortFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getString_name = "getString";

    public String getString()
    {
        return getString(null, false);
    }

    public String getString(java.util.Map<String, String> __ctx)
    {
        return getString(__ctx, true);
    }

    private String getString(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getString_name);
        return end_getString(begin_getString(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getString()
    {
        return begin_getString(null, false, false, null);
    }

    public Ice.AsyncResult begin_getString(java.util.Map<String, String> __ctx)
    {
        return begin_getString(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getString(Ice.Callback __cb)
    {
        return begin_getString(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getString(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getString(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getString(Callback_Goice_getString __cb)
    {
        return begin_getString(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getString(java.util.Map<String, String> __ctx, Callback_Goice_getString __cb)
    {
        return begin_getString(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getString(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getString(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getString(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getString(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getString(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getString(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getString(java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getString(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getString(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getString(__ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           GoicePrxHelper.__getString_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_getString(java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getString_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getString_name, __cb);
        try
        {
            __result.prepare(__getString_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getString(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getString_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getString_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getString(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getStringArr_name = "getStringArr";

    public String[] getStringArr()
    {
        return getStringArr(null, false);
    }

    public String[] getStringArr(java.util.Map<String, String> __ctx)
    {
        return getStringArr(__ctx, true);
    }

    private String[] getStringArr(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getStringArr_name);
        return end_getStringArr(begin_getStringArr(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getStringArr()
    {
        return begin_getStringArr(null, false, false, null);
    }

    public Ice.AsyncResult begin_getStringArr(java.util.Map<String, String> __ctx)
    {
        return begin_getStringArr(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getStringArr(Ice.Callback __cb)
    {
        return begin_getStringArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArr(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStringArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArr(Callback_Goice_getStringArr __cb)
    {
        return begin_getStringArr(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArr(java.util.Map<String, String> __ctx, Callback_Goice_getStringArr __cb)
    {
        return begin_getStringArr(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArr(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStringArr(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStringArr(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringArr(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getStringArr(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStringArr(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStringArr(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringArr(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getStringArr(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringArr(__ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              GoicePrxHelper.__getStringArr_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_getStringArr(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStringArr_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getStringArr_name, __cb);
        try
        {
            __result.prepare(__getStringArr_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getStringArr(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getStringArr_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = StrArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getStringArr_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_getStringArr(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getStringArrFrom_name = "getStringArrFrom";

    public String[] getStringArrFrom(String[] arr)
    {
        return getStringArrFrom(arr, null, false);
    }

    public String[] getStringArrFrom(String[] arr, java.util.Map<String, String> __ctx)
    {
        return getStringArrFrom(arr, __ctx, true);
    }

    private String[] getStringArrFrom(String[] arr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getStringArrFrom_name);
        return end_getStringArrFrom(begin_getStringArrFrom(arr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr)
    {
        return begin_getStringArrFrom(arr, null, false, false, null);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, java.util.Map<String, String> __ctx)
    {
        return begin_getStringArrFrom(arr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, Ice.Callback __cb)
    {
        return begin_getStringArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStringArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, Callback_Goice_getStringArrFrom __cb)
    {
        return begin_getStringArrFrom(arr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, java.util.Map<String, String> __ctx, Callback_Goice_getStringArrFrom __cb)
    {
        return begin_getStringArrFrom(arr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, 
                                                  IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStringArrFrom(arr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, 
                                                  IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringArrFrom(arr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStringArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStringArrFrom(String[] arr, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringArrFrom(arr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getStringArrFrom(String[] arr, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringArrFrom(arr, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  GoicePrxHelper.__getStringArrFrom_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_getStringArrFrom(String[] arr, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStringArrFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getStringArrFrom_name, __cb);
        try
        {
            __result.prepare(__getStringArrFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            StrArrHelper.write(__os, arr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getStringArrFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getStringArrFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = StrArrHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getStringArrFrom_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_getStringArrFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getStringFrom_name = "getStringFrom";

    public String getStringFrom(String value)
    {
        return getStringFrom(value, null, false);
    }

    public String getStringFrom(String value, java.util.Map<String, String> __ctx)
    {
        return getStringFrom(value, __ctx, true);
    }

    private String getStringFrom(String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getStringFrom_name);
        return end_getStringFrom(begin_getStringFrom(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getStringFrom(String value)
    {
        return begin_getStringFrom(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, java.util.Map<String, String> __ctx)
    {
        return begin_getStringFrom(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, Ice.Callback __cb)
    {
        return begin_getStringFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStringFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, Callback_Goice_getStringFrom __cb)
    {
        return begin_getStringFrom(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, java.util.Map<String, String> __ctx, Callback_Goice_getStringFrom __cb)
    {
        return begin_getStringFrom(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStringFrom(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringFrom(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStringFrom(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStringFrom(String value, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringFrom(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getStringFrom(String value, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStringFrom(value, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               GoicePrxHelper.__getStringFrom_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getStringFrom(String value, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStringFrom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getStringFrom_name, __cb);
        try
        {
            __result.prepare(__getStringFrom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getStringFrom(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getStringFrom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getStringFrom_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getStringFrom(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __non_name = "non";

    public String non()
    {
        return non(null, false);
    }

    public String non(java.util.Map<String, String> __ctx)
    {
        return non(__ctx, true);
    }

    private String non(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__non_name);
        return end_non(begin_non(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_non()
    {
        return begin_non(null, false, false, null);
    }

    public Ice.AsyncResult begin_non(java.util.Map<String, String> __ctx)
    {
        return begin_non(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_non(Ice.Callback __cb)
    {
        return begin_non(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_non(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_non(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_non(Callback_Goice_non __cb)
    {
        return begin_non(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_non(java.util.Map<String, String> __ctx, Callback_Goice_non __cb)
    {
        return begin_non(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_non(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_non(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_non(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_non(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_non(java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_non(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_non(java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_non(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_non(java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_non(__ctx, __explicitCtx, __synchronous, 
                         new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                             {
                                 public final void __completed(Ice.AsyncResult __result)
                                 {
                                     GoicePrxHelper.__non_completed(this, __result);
                                 }
                             });
    }

    private Ice.AsyncResult begin_non(java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__non_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__non_name, __cb);
        try
        {
            __result.prepare(__non_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_non(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __non_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __non_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_non(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __two_name = "two";

    public String two(String from, String to)
    {
        return two(from, to, null, false);
    }

    public String two(String from, String to, java.util.Map<String, String> __ctx)
    {
        return two(from, to, __ctx, true);
    }

    private String two(String from, String to, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__two_name);
        return end_two(begin_two(from, to, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_two(String from, String to)
    {
        return begin_two(from, to, null, false, false, null);
    }

    public Ice.AsyncResult begin_two(String from, String to, java.util.Map<String, String> __ctx)
    {
        return begin_two(from, to, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_two(String from, String to, Ice.Callback __cb)
    {
        return begin_two(from, to, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_two(String from, String to, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_two(from, to, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_two(String from, String to, Callback_Goice_two __cb)
    {
        return begin_two(from, to, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_two(String from, String to, java.util.Map<String, String> __ctx, Callback_Goice_two __cb)
    {
        return begin_two(from, to, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_two(String from, 
                                     String to, 
                                     IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_two(from, to, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_two(String from, 
                                     String to, 
                                     IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_two(from, to, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_two(String from, 
                                     String to, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_two(from, to, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_two(String from, 
                                     String to, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_two(from, to, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_two(String from, 
                                      String to, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_two(from, to, __ctx, __explicitCtx, __synchronous, 
                         new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                             {
                                 public final void __completed(Ice.AsyncResult __result)
                                 {
                                     GoicePrxHelper.__two_completed(this, __result);
                                 }
                             });
    }

    private Ice.AsyncResult begin_two(String from, 
                                      String to, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__two_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__two_name, __cb);
        try
        {
            __result.prepare(__two_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(from);
            __os.writeString(to);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_two(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __two_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __two_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        GoicePrx __proxy = (GoicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_two(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __vvoid_name = "vvoid";

    public void vvoid()
    {
        vvoid(null, false);
    }

    public void vvoid(java.util.Map<String, String> __ctx)
    {
        vvoid(__ctx, true);
    }

    private void vvoid(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_vvoid(begin_vvoid(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_vvoid()
    {
        return begin_vvoid(null, false, false, null);
    }

    public Ice.AsyncResult begin_vvoid(java.util.Map<String, String> __ctx)
    {
        return begin_vvoid(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_vvoid(Ice.Callback __cb)
    {
        return begin_vvoid(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_vvoid(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_vvoid(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_vvoid(Callback_Goice_vvoid __cb)
    {
        return begin_vvoid(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_vvoid(java.util.Map<String, String> __ctx, Callback_Goice_vvoid __cb)
    {
        return begin_vvoid(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_vvoid(IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_vvoid(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_vvoid(IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_vvoid(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_vvoid(java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_vvoid(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_vvoid(java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_vvoid(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_vvoid(java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_vvoid(__ctx, 
                           __explicitCtx, 
                           __synchronous, 
                           new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_vvoid(java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__vvoid_name, __cb);
        try
        {
            __result.prepare(__vvoid_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_vvoid(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __vvoid_name);
    }

    private static final String __vvoidTo_name = "vvoidTo";

    public void vvoidTo(String value)
    {
        vvoidTo(value, null, false);
    }

    public void vvoidTo(String value, java.util.Map<String, String> __ctx)
    {
        vvoidTo(value, __ctx, true);
    }

    private void vvoidTo(String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_vvoidTo(begin_vvoidTo(value, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_vvoidTo(String value)
    {
        return begin_vvoidTo(value, null, false, false, null);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, java.util.Map<String, String> __ctx)
    {
        return begin_vvoidTo(value, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, Ice.Callback __cb)
    {
        return begin_vvoidTo(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_vvoidTo(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, Callback_Goice_vvoidTo __cb)
    {
        return begin_vvoidTo(value, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, java.util.Map<String, String> __ctx, Callback_Goice_vvoidTo __cb)
    {
        return begin_vvoidTo(value, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_vvoidTo(value, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_vvoidTo(value, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_vvoidTo(value, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_vvoidTo(String value, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_vvoidTo(value, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_vvoidTo(String value, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_vvoidTo(value, 
                             __ctx, 
                             __explicitCtx, 
                             __synchronous, 
                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_vvoidTo(String value, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__vvoidTo_name, __cb);
        try
        {
            __result.prepare(__vvoidTo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(value);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_vvoidTo(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __vvoidTo_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static GoicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), GoicePrx.class, GoicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static GoicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), GoicePrx.class, GoicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static GoicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), GoicePrx.class, GoicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static GoicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), GoicePrx.class, GoicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static GoicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, GoicePrx.class, GoicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static GoicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, GoicePrx.class, GoicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::goiceinter::Goice"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, GoicePrx v)
    {
        __os.writeProxy(v);
    }

    public static GoicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            GoicePrxHelper result = new GoicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
